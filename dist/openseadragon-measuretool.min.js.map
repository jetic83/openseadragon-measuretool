{"version":3,"sources":["measuretool.js","measuretooloverlay.js","measuretoolrect.js"],"names":["$","onOutsideDrag","e","this","rectDone","rect","viewer","setMouseNavEnabled","delta","viewport","deltaPointsFromPixels","end","pointFromPixel","position","start","Point","x","y","degrees","getRotation","startAngle","width","height","quadrant","switched","startRotated","rotatedStartPoint","getPrerotatedRect","startRotatedHeight","MeasuretoolRect","draw","onOutsideDragEnd","onClick","canvas","focus","onCornerDrag","corner","rotation","getDegreeRotation","center","rotate","getCenter","currentCorner","newCenter","target","minus","onCornerDragEnd","onKeyPress","key","keyCode","charCode","confirm","String","fromCharCode","keyboardShortcut","toggleState","dist","distanceTo","angle","Math","atan2","PI","heightModDelta","getWithUnit","value","unitSuffix","getRoundedWithUnit","sig","factor","pow","round","version","major","Error","Viewer","prototype","measuretool","options","measuretoolInstance","Measuretool","extend","isMeasuring","buttonActiveImg","element","pixelsPerMeter","toggleButton","showMeasuretoolControl","showConfirmDenyButtons","styleConfirmDenyButtons","returnPixelCoordinates","onMeasurementCanceled","onMeasurementChanged","onMeasurementToggled","makeNeutralElement","className","lineDiv","style","border","backgroundColor","appendChild","infoDiv","color","fontWeight","padding","top","left","minWidth","textAlign","corners","i","id","background","MouseTracker","dragHandler","bind","dragEndHandler","setTimeout","bottom","right","overlay","MeasuretoolOverlay","outerTracker","clickTimeThreshold","clickDistThreshold","delegate","clickHandler","startDisabled","addEvent","container","useGroup","buttons","anyButton","onFocusHandler","onFocus","onBlurHandler","onBlur","Button","getElement","tooltip","getString","onRelease","push","imgDown","cloneNode","cancelButton","cancel","classList","add","transform","addHandler","onMeasurementChange","ControlDock","setState","enabled","setTracking","undraw","visibility","raiseEvent","enable","disable","quadrant_tmp","document","getElementById","result","clone","real","viewportToViewerElementRectangle","fromRect","children","lineDivWidthNew","sqrt","drawLength","a","atan","update","normalize","drawHTML","drawer","destroy","viewportToImageRectangle","pixelLength","zoom","world","getItemAt","viewportToImageZoom","getZoom","currentPPM","text","innerHTML","OpenSeadragon","location","Overlay","apply","arguments","isPlainObject","Object","create","replace","Rect","equals","other","toString","swapWidthHeight","swapped","getAngleFromCenter","point","diff","fixed","fitsIn","area","getTopLeft","getTopRight","getBottomRight","getBottomLeft","areaEnd","reduceRotation","reduced"],"mappings":"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","file":"openseadragon-measuretool.min.js","sourcesContent":["(function($) {\n    'use strict';\n\n    if (!$.version || $.version.major < 2) {\n        throw new Error('This version of OpenSeadragonMeasuretool requires OpenSeadragon version 2.0.0+');\n    }\n\n    $.Viewer.prototype.measuretool = function(options) {\n        if (!this.measuretoolInstance || options) {\n            options = options || {};\n            options.viewer = this;\n            this.measuretoolInstance = new $.Measuretool(options);\n        }\n        return this.measuretoolInstance;\n    };\n\n\n    /**\n    * @class Measuretool\n    * @classdesc Provides functionality for measuring distance in an image\n    * @memberof OpenSeadragon\n    * @param {Object} options\n    */\n    $.Measuretool = function (options) {\n\n        $.extend( true, this, {\n            // internal state properties\n            viewer:                  null,\n            isMeasuring:             false,\n            buttonActiveImg:         false,\n            rectDone:                true,\n            quadrant:                0,\n            switched:                false,\n\n            // options\n            element:                 null,\n            pixelsPerMeter:          null,\n            toggleButton:            null,\n            showMeasuretoolControl:  true,\n            showConfirmDenyButtons:  true,\n            styleConfirmDenyButtons: true,\n            returnPixelCoordinates:  true,\n            keyboardShortcut:        'd',\n            rect:                    null,\n            startRotated:            false, // useful for rotated crops\n            startRotatedHeight: 0.1,\n            startAngle: 0,\n            onMeasurementCanceled:   null,\n            onMeasurementChanged:    null,\n            onMeasurementToggled:    null\n        }, options );\n\n        if (!this.element) {\n            this.element = $.makeNeutralElement('div');\n            this.element.className = 'measuretool-box';\n            //this.element.style.backgroundColor = 'yellow';\n\n            // add diagonal line\n            var lineDiv = $.makeNeutralElement('div');\n            lineDiv.style.position = 'absolute';\n            lineDiv.style.width = '100%';\n            lineDiv.style.height = '0px';\n            lineDiv.style.border = '1px solid brown';\n            lineDiv.style.backgroundColor = 'brown';\n            lineDiv.className = 'measuretool-box-line';\n            this.element.appendChild(lineDiv);\n\n            // add info box\n            var infoDiv = $.makeNeutralElement('div');\n            infoDiv.style.position = 'absolute';\n            infoDiv.style.color = 'brown';\n            infoDiv.style.fontWeight = 'bold';\n            infoDiv.style.padding = '2px';\n            infoDiv.style.top = '50%';\n            infoDiv.style.left = '50%';\n            infoDiv.style.minWidth = '5em';\n            infoDiv.style.textAlign = 'center';\n            infoDiv.style.backgroundColor = 'rgba(255, 255, 255, 0.6)';\n            infoDiv.className = 'measuretool-box-info';\n            this.element.appendChild(infoDiv);\n        }\n        //this.borders = this.borders || [];\n        var corners = [];\n        for (var i = 0; i < 2; i++) {\n            \n            corners[i]                  = $.makeNeutralElement('div');\n            corners[i].className        = 'corner-' + i + '-handle';\n            corners[i].id               = 'corner-' + i;\n            corners[i].style.position   = 'absolute';\n            corners[i].style.width      = '10px';\n            corners[i].style.height     = '10px';\n            corners[i].style.background = '#000';\n            corners[i].style.border     = '1px solid #ccc';\n            new $.MouseTracker({\n                element:     corners[i],\n                dragHandler: onCornerDrag.bind(this, i),\n                dragEndHandler: onCornerDragEnd.bind(this, i),\n            });\n\n            // defer corners, so they are appended last\n            setTimeout(this.element.appendChild.bind(this.element, corners[i]), 0);\n        }\n        corners[0].style.bottom = '-5px';\n        corners[0].style.left = '-5px';\n        corners[1].style.top = '-5px';\n        corners[1].style.right = '-5px';\n        \n        if (!this.overlay) {\n            this.overlay = new $.MeasuretoolOverlay(this.element, this.rect || new $.MeasuretoolRect());\n        }\n/*\n        this.innerTracker = new $.MouseTracker({\n            element:            this.element,\n            clickTimeThreshold: this.viewer.clickTimeThreshold,\n            clickDistThreshold: this.viewer.clickDistThreshold,\n          //  dragHandler:        $.delegate( this, onInsideDrag ),\n          //  dragEndHandler:     $.delegate( this, onInsideDragEnd ),\n            // keyHandler:         $.delegate( this, onKeyPress ),\n            clickHandler:       $.delegate( this, onClick ),\n            // scrollHandler:      $.delegate( this.viewer, this.viewer.innerTracker.scrollHandler ),\n            // pinchHandler:       $.delegate( this.viewer, this.viewer.innerTracker.pinchHandler ),\n        });\n        */\n        this.outerTracker = new $.MouseTracker({\n            element:            this.viewer.canvas,\n            clickTimeThreshold: this.viewer.clickTimeThreshold,\n            clickDistThreshold: this.viewer.clickDistThreshold,\n            dragHandler:        $.delegate( this, onOutsideDrag ),\n            dragEndHandler:     $.delegate( this, onOutsideDragEnd ),\n            clickHandler:       $.delegate( this, onClick ),\n            startDisabled:      !this.isMeasuring,\n        });\n\n        if (this.keyboardShortcut) {\n            $.addEvent(\n                this.viewer.container,\n                'keypress',\n                $.delegate(this, onKeyPress),\n                false\n            );\n        }\n\n        var useGroup = this.viewer.buttons && this.viewer.buttons.buttons;\n        var anyButton = useGroup ? this.viewer.buttons.buttons[0] : null;\n        var onFocusHandler = anyButton ? anyButton.onFocus : null;\n        var onBlurHandler = anyButton ? anyButton.onBlur : null;\n        if (this.showMeasuretoolControl) {\n            this.toggleButton = new $.Button({\n                element:    this.toggleButton ? $.getElement( this.toggleButton ) : null,\n                clickTimeThreshold: this.viewer.clickTimeThreshold,\n                clickDistThreshold: this.viewer.clickDistThreshold,\n                tooltip:    $.getString('Tooltips.MeasuretoolToggle') || 'Toggle measuretool',\n                onRelease:  this.toggleState.bind( this ),\n                onFocus:    onFocusHandler,\n                onBlur:     onBlurHandler\n            });\n            if (useGroup) {\n                this.viewer.buttons.buttons.push(this.toggleButton);\n                this.viewer.buttons.element.appendChild(this.toggleButton.element);\n            }\n            if (this.toggleButton.imgDown) {\n                this.buttonActiveImg = this.toggleButton.imgDown.cloneNode(true);\n                this.toggleButton.element.appendChild(this.buttonActiveImg);\n            }\n        }\n        if (this.showConfirmDenyButtons) {\n            this.cancelButton = new $.Button({\n                element:    this.cancelButton ? $.getElement( this.cancelButton ) : null,\n                clickTimeThreshold: this.viewer.clickTimeThreshold,\n                clickDistThreshold: this.viewer.clickDistThreshold,\n                tooltip:    $.getString('Tooltips.MeasuretoolConfirm') || 'Cancel measuretool',\n                onRelease:  this.cancel.bind( this ),\n                onFocus:    onFocusHandler,\n                onBlur:     onBlurHandler\n            });\n            var cancel = this.cancelButton.element;\n            cancel.classList.add('cancel-button');\n            this.element.appendChild(cancel);\n\n            if (this.styleConfirmDenyButtons) {\n                cancel.style.position = 'absolute';\n                cancel.style.top = '50%';\n                cancel.style.left = '50%';\n                cancel.style.transform = 'translate(0, -50%)';\n            }\n        }\n\n        this.viewer.addHandler('measurement_cancel', this.onMeasurementCanceled);\n        this.viewer.addHandler('measurement_change', this.onMeasurementChange);\n        this.viewer.addHandler('measurement_toggle', this.onMeasurementToggled);\n\n        this.viewer.addHandler('open', this.draw.bind(this));\n        this.viewer.addHandler('animation', this.draw.bind(this));\n        this.viewer.addHandler('resize', this.draw.bind(this));\n        this.viewer.addHandler('rotate', this.draw.bind(this));\n    };\n\n    $.extend($.Measuretool.prototype, $.ControlDock.prototype, /** @lends OpenSeadragon.Selection.prototype */{\n\n        toggleState: function() {\n            return this.setState(!this.isMeasuring);\n        },\n\n        setState: function(enabled) {\n            this.isMeasuring = enabled;\n            // this.viewer.innerTracker.setTracking(!enabled);\n            this.outerTracker.setTracking(enabled);\n            enabled ? this.draw() : this.undraw();\n            if (this.buttonActiveImg) {\n                this.buttonActiveImg.style.visibility = enabled ? 'visible' : 'hidden';\n            }\n            this.viewer.raiseEvent('measurement_toggle', { enabled: enabled });\n            return this;\n        },\n\n        enable: function() {\n            return this.setState(true);\n        },\n\n        disable: function() {\n            return this.setState(false);\n        },\n\n        draw: function() {\n            if (this.rect) {\n\n                var quadrant_tmp = this.quadrant;\n\n                var degrees = viewer.viewport.getRotation();\n                \n                if (document.getElementById('corner-0')) {\n                    switch (quadrant_tmp) {\n                        case 0:\n                            document.getElementById('corner-0').style.right = '';\n                            document.getElementById('corner-1').style.left = '';\n\n                            document.getElementById('corner-0').style.left = '-5px';\n                            document.getElementById('corner-1').style.right = '-5px';\n                            break;\n                        case 1:\n                            document.getElementById('corner-0').style.left = '';\n                            document.getElementById('corner-1').style.right = '';\n\n                            document.getElementById('corner-0').style.right = '-5px';\n                            document.getElementById('corner-1').style.left = '-5px';\n                            break;\n                        case 2:\n                            document.getElementById('corner-0').style.right = '';\n                            document.getElementById('corner-1').style.left = '';\n\n                            document.getElementById('corner-0').style.left = '-5px';\n                            document.getElementById('corner-1').style.right = '-5px';\n                            break;\n                        case 3:\n                            document.getElementById('corner-0').style.left = '';\n                            document.getElementById('corner-1').style.right = '';\n\n                            document.getElementById('corner-0').style.right = '-5px';\n                            document.getElementById('corner-1').style.left = '-5px';\n                            break;\n                    }\n                }\n\n                var result = this.rect.clone();\n                var real = this.viewer.viewport.viewportToViewerElementRectangle(result);\n                real = $.MeasuretoolRect.fromRect(real);\n                real.rotation = result.rotation;\n                result = real;\n                \n                var lineDiv = this.element.children[0];\n                var lineDivWidthNew = Math.sqrt(Math.pow(result.width, 2) + Math.pow(result.height, 2));\n                this.drawLength(lineDivWidthNew);\n                lineDiv.style.width = lineDivWidthNew + 'px';\n                var a = Math.atan(result.height / result.width) * (180 / Math.PI);\n\n                if (quadrant_tmp === 0 || quadrant_tmp === 2) {\n                    if (degrees >= 270) {\n                        if (this.startAngle >= 270) {\n                            a = 90 - a;\n                        } else {\n                            a -= 90;\n                        }\n                    } else if (degrees >= 180) {\n                        \n                    } else if (degrees >= 90) {\n                        if (this.startAngle >= 90 && this.startAngle < 180) {\n                            a = 90 - a;\n                        } else {\n                            a -= 90;\n                        }\n                    }\n                    if (this.startAngle >= 270 && degrees >= 270 || (this.startAngle >= 90 && this.startAngle < 180 && degrees >= 90 && degrees < 180)) {\n                        lineDiv.style.transform = 'translateY(' + result.width / 2 + 'px) translateX(-' + (lineDivWidthNew - result.height) / 2 + 'px) rotate(-' + a + 'deg)';\n                    } else {\n                        lineDiv.style.transform = 'translateY(' + result.height / 2 + 'px) translateX(-' + (lineDivWidthNew - result.width) / 2 + 'px) rotate(-' + a + 'deg)';\n                    }\n                } else if (quadrant_tmp === 1 || quadrant_tmp === 3) {\n                    if (degrees >= 270) {\n                        a = 90 - a;\n                        lineDiv.style.transform = 'translateY(' + result.width / 2 + 'px) translateX(-' + (lineDivWidthNew - result.height) / 2 + 'px) rotate(' + a + 'deg)';\n                    } else if (degrees >= 180) {\n                        lineDiv.style.transform = 'translateY(' + result.height / 2 + 'px) translateX(-' + (lineDivWidthNew - result.width) / 2 + 'px) rotate(' + a + 'deg)';\n                    } else if (degrees >= 90) {\n                        a = 90 - a;\n                        lineDiv.style.transform = 'translateY(' + result.width / 2 + 'px) translateX(-' + (lineDivWidthNew - result.height) / 2 + 'px) rotate(' + a + 'deg)';\n                    } else {\n                        lineDiv.style.transform = 'translateY(' + result.height / 2 + 'px) translateX(-' + (lineDivWidthNew - result.width) / 2 + 'px) rotate(' + a + 'deg)';\n                    }\n                } /*else if (quadrant_tmp === 2) {\n                    if (degrees >= 270) {\n                        if (this.startAngle >= 270) {\n                            a = 90 - a;\n                        } else {\n                            a -= 90;\n                        }\n                    } else if (degrees >= 180) {\n\n                    } else if (degrees >= 90) {\n                        if (this.startAngle >= 90 && this.startAngle < 180) {\n                            a = 90 - a;\n                        } else {\n                            a -= 90;\n                        }\n                    }\n                    if (this.startAngle >= 270 && degrees >= 270 || (this.startAngle >= 90 && this.startAngle < 180 && degrees >= 90 && degrees < 180)) {\n                        lineDiv.style.transform = 'translateY(' + result.width / 2 + 'px) translateX(-' + (lineDivWidthNew - result.height) / 2 + 'px) rotate(-' + a + 'deg)';\n                    } else {\n                        lineDiv.style.transform = 'translateY(' + result.height / 2 + 'px) translateX(-' + (lineDivWidthNew - result.width) / 2 + 'px) rotate(-' + a + 'deg)';\n                    }\n                } else if (quadrant_tmp === 3) {\n                    if (degrees >= 270) {\n                        a = 90 - a;\n                        lineDiv.style.transform = 'translateY(' + result.width / 2 + 'px) translateX(-' + (lineDivWidthNew - result.height) / 2 + 'px) rotate(' + a + 'deg)';\n                    } else if (degrees >= 180) {\n                        lineDiv.style.transform = 'translateY(' + result.height / 2 + 'px) translateX(-' + (lineDivWidthNew - result.width) / 2 + 'px) rotate(' + a + 'deg)';\n                    } else if (degrees >= 90) {\n                        a = 90 - a;\n                        lineDiv.style.transform = 'translateY(' + result.width / 2 + 'px) translateX(-' + (lineDivWidthNew - result.height) / 2 + 'px) rotate(' + a + 'deg)';\n                    } else {\n                        lineDiv.style.transform = 'translateY(' + result.height / 2 + 'px) translateX(-' + (lineDivWidthNew - result.width) / 2 + 'px) rotate(' + a + 'deg)';\n                    }\n                } // */\n\n                this.overlay.update(this.rect.normalize());\n                this.overlay.drawHTML(this.viewer.drawer.container, this.viewer.viewport);\n            }\n            this.viewer.raiseEvent('measurement_change', this.rect ? this.rect.normalize() : null);\n            return this;\n        },\n\n        undraw: function() {\n            this.overlay.destroy();\n            this.rect = null;\n            return this;\n        },\n\n        cancel: function () {\n            if (this.rect) {\n                var result = this.rect.normalize();\n                if (this.returnPixelCoordinates) {\n                    var real = this.viewer.viewport.viewportToImageRectangle(result);\n                    real = $.MeasuretoolRect.fromRect(real).round();\n                    real.rotation = result.rotation;\n                    result = real;\n                }\n                this.viewer.raiseEvent('measurement_cancel', result);\n                this.undraw();\n            }\n            return this;\n        },\n\n        drawLength: function (pixelLength) {\n            var infoDiv = this.element.children[1];\n            var viewport = this.viewer.viewport;\n            var zoom = this.viewer.world.getItemAt(0).viewportToImageZoom(viewport.getZoom(true));\n            var currentPPM = zoom * this.pixelsPerMeter;\n            var text = getRoundedWithUnit(pixelLength / currentPPM, 2, 'm');\n            infoDiv.innerHTML = text;\n            var degrees = viewer.viewport.getRotation();\n            infoDiv.style.transform = 'rotate(-' + degrees + 'deg)';\n        }\n\n    });\n\n    function onOutsideDrag(e) {\n        if (this.rectDone && this.rect) {\n            this.rectDone = false;\n            this.rect = null;\n        }\n        // Disable move when makeing new selection\n        this.viewer.setMouseNavEnabled(false);\n        var delta = this.viewer.viewport.deltaPointsFromPixels(e.delta, true);\n        var end = this.viewer.viewport.pointFromPixel(e.position, true);\n        var start = new $.Point(end.x - delta.x, end.y - delta.y);\n        var degrees = viewer.viewport.getRotation();\n        this.startAngle = degrees;\n        if (!this.rect) {\n            if (this.startRotated) {\n                this.rotatedStartPoint = start;\n                this.rect = getPrerotatedRect(start, end, this.startRotatedHeight);\n            } else {\n                this.rect = new $.MeasuretoolRect(start.x, start.y, delta.x, delta.y);\n            }\n            this.rectDone = false;\n        } else {\n            this.rect.width += delta.x;\n            this.rect.height += delta.y;\n\n            if (end.x - this.rect.x < 0) {\n                if (end.y - this.rect.y < 0) {\n                    this.quadrant = 1;\n                    this.switched = false;\n                } else {\n                    this.quadrant = 2;\n                    this.switched = true;\n                }\n            } else if (end.y - this.rect.y < 0) {\n                this.quadrant = 0;\n                this.switched = false;\n            } else {\n                this.quadrant = 3;\n                this.switched = true;\n            }\n\n            //msg(this.quadrant + (this.switched ? \" switched\" : \"\"), \"#000\", 1, true);\n        }\n        this.draw();\n    }\n\n    function onOutsideDragEnd() {\n        // Enable move after new selection is done\n        this.viewer.setMouseNavEnabled(true);\n        this.rectDone = true;\n\n        //this.outerTracker.setTracking(false);\n    }\n\n    function onClick() {\n        this.viewer.canvas.focus();\n    }\n\n    function onCornerDrag(corner, e) {\n        var delta = e.delta;\n        var rotation = this.rect.getDegreeRotation();\n        var degrees = viewer.viewport.getRotation();\n        this.startAngle = degrees;\n        var center;\n        if (rotation !== 0) {\n            // adjust vector\n            delta = delta.rotate(-1 * rotation, new $.Point(0, 0));\n            center = this.rect.getCenter();\n        }\n        delta = this.viewer.viewport.deltaPointsFromPixels(delta, true);\n        var currentCorner = corner;\n        if (this.switched) {\n            currentCorner = 1 - currentCorner;\n        }\n        switch (currentCorner) {\n            case 0:\n                this.rect.y += delta.y;\n                this.rect.height -= delta.y;\n                this.rect.x += delta.x;\n                this.rect.width -= delta.x;\n                break;\n            case 1:\n                this.rect.width += delta.x;\n                this.rect.height += delta.y;\n                break;\n        }\n        \n        if (this.rect.width < 0) {\n            if (this.rect.height < 0) {\n                this.quadrant = 1;\n            } else {\n                this.quadrant = 2;\n            }\n        } else if (this.rect.height < 0) {\n            this.quadrant = 0;\n        } else {\n            this.quadrant = 3;\n        }\n\n        if (corner === 0) {\n            this.quadrant = (this.quadrant + 2) % 4;\n        }\n\n        if (rotation !== 0) {\n            // calc center deviation\n            var newCenter = this.rect.getCenter();\n            // rotate new center around old\n            var target = newCenter.rotate(rotation, center);\n            // adjust new center\n            delta = target.minus(newCenter);\n            this.rect.x += delta.x;\n            this.rect.y += delta.y;\n        }\n\n        //msg(this.quadrant + (this.switched ? \" switched\" : \"\"), \"#000\", 1, true);\n\n        this.draw();\n    }\n\n\n    function onCornerDragEnd(corner, e) {\n        if (corner === 0) {\n            this.switched = this.quadrant === 0 || this.quadrant === 1;\n        }\n        else if (corner === 1) {\n            this.switched = this.quadrant === 2 || this.quadrant === 3;\n        }\n    }\n\n    function onKeyPress(e) {\n        var key = e.keyCode ? e.keyCode : e.charCode;\n        if (key === 13) {\n            this.confirm();\n        } else if (String.fromCharCode(key) === this.keyboardShortcut) {\n            this.toggleState();\n        }\n    }\n\n    function getPrerotatedRect(start, end, height) {\n        if (start.x > end.x) {\n            // always draw left to right\n            var x = start;\n            start = end;\n            end = x;\n        }\n        var delta = end.minus(start);\n        var dist = start.distanceTo(end);\n        var angle = -1 * Math.atan2(delta.x, delta.y) + (Math.PI / 2);\n        var center = new $.Point(\n            delta.x / 2 + start.x,\n            delta.y / 2 + start.y\n        );\n        var rect = new $.MeasuretoolRect(\n            center.x - (dist / 2),\n            center.y - (height / 2),\n            dist,\n            height,\n            angle\n        );\n        var heightModDelta = new $.Point(0, height);\n        heightModDelta = heightModDelta.rotate(rect.getDegreeRotation(), new $.Point(0, 0));\n        rect.x += heightModDelta.x / 2;\n        rect.y += heightModDelta.y / 2;\n        return rect;\n    }\n\n    \n\n    function getWithUnit(value, unitSuffix) {\n        if (value < 0.000001) {\n            return value * 1000000000 + ' n' + unitSuffix;\n        }\n        if (value < 0.00001) { // mm measure up to 10 micrometer, then micrometer measure.\n            return value * 1000000 + ' μ' + unitSuffix;\n        }\n        if (value < 1) {\n            return value * 1000 + ' m' + unitSuffix;\n        }\n        if (value >= 1000) {\n            return value / 1000 + ' k' + unitSuffix;\n        }\n        return value + ' ' + unitSuffix;\n    }\n\n    function getRoundedWithUnit(value, sig, unitSuffix) {\n        if (sig < 0) {\n            return getWithUnit(value, unitSuffix);\n        }\n\n        var factor = Math.pow(10, sig);\n\n        if (value < 0.000001) {\n            return Math.round(factor * value * 1000000000) / factor + ' n' + unitSuffix;\n        }\n        if (value < 0.00001) { // mm measure up to 10 micrometer, then micrometer measure.\n            return Math.round(factor * value * 1000000) / factor + ' μ' + unitSuffix;\n        }\n        if (value < 1) {\n            return Math.round(factor * value * 1000) / factor + ' m' + unitSuffix;\n        }\n        if (value >= 1000) {\n            return Math.round(factor * value / 1000) / factor + ' k' + unitSuffix;\n        }\n        return Math.round(factor * value) / factor + ' ' + unitSuffix;\n    }\n\n\n})(OpenSeadragon);\n","(function( $ ){\r\n    'use strict';\r\n\r\n    /**\r\n     * @class Overlay\r\n     * @classdesc Provides a way to float an HTML element on top of the viewer element.\r\n     *\r\n     * @memberof OpenSeadragon\r\n     * @param {Object} options\r\n     * @param {Element} options.element\r\n     * @param {OpenSeadragon.Point|OpenSeadragon.Rect|OpenSeadragon.SelectionRect} options.location - The\r\n     * location of the overlay on the image. If a {@link OpenSeadragon.Point}\r\n     * is specified, the overlay will keep a constant size independently of the\r\n     * zoom. If a {@link OpenSeadragon.Rect} is specified, the overlay size will\r\n     * be adjusted when the zoom changes.\r\n     * @param {OpenSeadragon.OverlayPlacement} [options.placement=OpenSeadragon.OverlayPlacement.TOP_LEFT]\r\n     * Relative position to the viewport.\r\n     * Only used if location is a {@link OpenSeadragon.Point}.\r\n     * @param {OpenSeadragon.Overlay.OnDrawCallback} [options.onDraw]\r\n     * @param {Boolean} [options.checkResize=true] Set to false to avoid to\r\n     * check the size of the overlay everytime it is drawn when using a\r\n     * {@link OpenSeadragon.Point} as options.location. It will improve\r\n     * performances but will cause a misalignment if the overlay size changes.\r\n     */\r\n    $.MeasuretoolOverlay = function( element, location) {\r\n        $.Overlay.apply( this, arguments );\r\n\r\n        // set the rotation in radians\r\n        if ( $.isPlainObject( element ) ) {\r\n            this.rotation = element.location.rotation || 0;\r\n        } else {\r\n            this.rotation = location.rotation || 0;\r\n        }\r\n    };\r\n\r\n    $.MeasuretoolOverlay.prototype = $.extend(Object.create($.Overlay.prototype), {\r\n\r\n        /**\r\n         * @function\r\n         * @param {Element} container\r\n         */\r\n        drawHTML: function() {\r\n            $.Overlay.prototype.drawHTML.apply( this, arguments );\r\n            this.style.transform = this.style.transform.replace(/ ?rotate\\(.+rad\\)/, '') +\r\n                ' rotate(' + this.rotation + 'rad)';\r\n        },\r\n\r\n        /**\r\n         * @function\r\n         * @param {OpenSeadragon.Point|OpenSeadragon.Rect} location\r\n         * @param {OpenSeadragon.OverlayPlacement} position\r\n         */\r\n        update: function( location ) {\r\n            $.Overlay.prototype.update.apply( this, arguments );\r\n            this.rotation = location.rotation || 0;\r\n        }\r\n    });\r\n\r\n}( OpenSeadragon ));\r\n","(function( $ ){\r\n    'use strict';\r\n\r\n    /**\r\n     * @class MeasuretoolRect\r\n     * @classdesc A display rectangle is very similar to {@link OpenSeadragon.Rect} but adds rotation\r\n     * around the center point\r\n     *\r\n     * @memberof OpenSeadragon\r\n     * @extends OpenSeadragon.Rect\r\n     * @param {Number} x The vector component 'x'.\r\n     * @param {Number} y The vector component 'y'.\r\n     * @param {Number} width The vector component 'height'.\r\n     * @param {Number} height The vector component 'width'.\r\n     * @param {Number} rotation The rotation in radians\r\n     */\r\n    $.MeasuretoolRect = function( x, y, width, height, rotation ) {\r\n        $.Rect.apply( this, [ x, y, width, height ] );\r\n\r\n        /**\r\n         * The rotation in radians\r\n         * @member {Number} rotation\r\n         * @memberof OpenSeadragon.MeasuretoolRect#\r\n         */\r\n        this.rotation = rotation || 0;\r\n    };\r\n\r\n    $.MeasuretoolRect.fromRect = function(rect) {\r\n        return new $.MeasuretoolRect(\r\n            rect.x,\r\n            rect.y,\r\n            rect.width,\r\n            rect.height\r\n        );\r\n    };\r\n\r\n    $.MeasuretoolRect.prototype = $.extend( Object.create($.Rect.prototype), {\r\n\r\n        /**\r\n         * @function\r\n         * @returns {OpenSeadragon.Rect} a duplicate of this Rect\r\n         */\r\n        clone: function() {\r\n            return new $.MeasuretoolRect(this.x, this.y, this.width, this.height, this.rotation);\r\n        },\r\n\r\n        /**\r\n         * Determines if two Rectangles have equivalent components.\r\n         * @function\r\n         * @param {OpenSeadragon.Rect} rectangle The Rectangle to compare to.\r\n         * @return {Boolean} 'true' if all components are equal, otherwise 'false'.\r\n         */\r\n        equals: function( other ) {\r\n            return $.Rect.prototype.equals.apply(this, [ other ]) &&\r\n                ( this.rotation === other.rotation );\r\n        },\r\n\r\n        /**\r\n         * Provides a string representation of the rectangle which is useful for\r\n         * debugging.\r\n         * @function\r\n         * @returns {String} A string representation of the rectangle.\r\n         */\r\n        toString: function() {\r\n            return '[' +\r\n                (Math.round(this.x*100) / 100) + ',' +\r\n                (Math.round(this.y*100) / 100) + ',' +\r\n                (Math.round(this.width*100) / 100) + 'x' +\r\n                (Math.round(this.height*100) / 100) + '@' +\r\n                (Math.round(this.rotation*100) / 100) +\r\n            ']';\r\n        },\r\n\r\n        swapWidthHeight: function() {\r\n            var swapped = this.clone();\r\n            swapped.width = this.height;\r\n            swapped.height = this.width;\r\n            swapped.x += (this.width - this.height) / 2;\r\n            swapped.y += (this.height - this.width) / 2;\r\n            return swapped;\r\n        },\r\n\r\n        /**\r\n         * @function\r\n         * @returns {Number} The rotaion in degrees\r\n         */\r\n        getDegreeRotation: function() {\r\n            return this.rotation * (180/Math.PI);\r\n        },\r\n\r\n        /**\r\n         * @function\r\n         * @param {OpenSeadragon.Point} point\r\n         * @returns {Number} The angle in radians\r\n         */\r\n        getAngleFromCenter: function(point) {\r\n            var diff = point.minus(this.getCenter());\r\n            return Math.atan2(diff.x, diff.y);\r\n        },\r\n\r\n        /**\r\n         * Rounds pixel coordinates\r\n         * @function\r\n         * @returns {MeasuretoolRect} The altered rect\r\n         */\r\n        round: function() {\r\n            return new $.MeasuretoolRect(\r\n                Math.round(this.x),\r\n                Math.round(this.y),\r\n                Math.round(this.width),\r\n                Math.round(this.height),\r\n                this.rotation\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Fixes negative width/height, rotation larger than PI\r\n         * @function\r\n         * @returns {MeasuretoolRect} The normalized rect\r\n         */\r\n        normalize: function() {\r\n            var fixed = this.clone();\r\n            if (fixed.width < 0) {\r\n                fixed.x += fixed.width;\r\n                fixed.width *= -1;\r\n            }\r\n            if (fixed.height < 0) {\r\n                fixed.y += fixed.height;\r\n                fixed.height *= -1;\r\n            }\r\n            fixed.rotation %= Math.PI;\r\n            return fixed;\r\n        },\r\n\r\n        /**\r\n         * @function\r\n         * @param {OpenSeadragon.Rect} area\r\n         * @returns {Boolean} Does this rect fit in a specified area\r\n         */\r\n        fitsIn: function(area) {\r\n            var rect = this.normalize();\r\n            var corners = [\r\n                rect.getTopLeft(),\r\n                rect.getTopRight(),\r\n                rect.getBottomRight(),\r\n                rect.getBottomLeft(),\r\n            ];\r\n            var center = rect.getCenter();\r\n            var rotation = rect.getDegreeRotation();\r\n            var areaEnd = area.getBottomRight();\r\n            for (var i = 0; i < 4; i++) {\r\n                corners[i] = corners[i].rotate(rotation, center);\r\n                if (corners[i].x < area.x || corners[i].x > areaEnd.x ||\r\n                    corners[i].y < area.y || corners[i].y > areaEnd.y) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Reduces rotation to within [-45, 45] degrees by swapping width & height\r\n         * @function\r\n         * @returns {MeasuretoolRect} The altered rect\r\n         */\r\n        reduceRotation: function() {\r\n            var reduced;\r\n            if (this.rotation < Math.PI / (-4)) {\r\n                reduced = this.swapWidthHeight();\r\n                reduced.rotation += Math.PI / 2;\r\n            } else if (this.rotation > Math.PI / 4) {\r\n                reduced = this.swapWidthHeight();\r\n                reduced.rotation -= Math.PI / 2;\r\n            } else {\r\n                reduced = this.clone();\r\n            }\r\n            return reduced;\r\n        },\r\n    });\r\n\r\n}( OpenSeadragon ));\r\n"]}