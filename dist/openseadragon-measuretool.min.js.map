{"version":3,"sources":["measuretool.js","measuretooloverlay.js","measuretoolrect.js"],"names":["$","onOutsideDrag","e","this","rectDone","rect","viewer","setMouseNavEnabled","delta","viewport","deltaPointsFromPixels","end","pointFromPixel","position","start","Point","x","y","degrees","getRotation","startAngle","width","height","quadrant","switched","startRotated","rotatedStartPoint","getPrerotatedRect","startRotatedHeight","MeasuretoolRect","draw","onOutsideDragEnd","onClick","canvas","focus","onCornerDrag","corner","rotation","getDegreeRotation","center","rotate","getCenter","currentCorner","newCenter","target","minus","onCornerDragEnd","onKeyPress","key","keyCode","charCode","confirm","String","fromCharCode","keyboardShortcut","toggleState","dist","distanceTo","angle","Math","atan2","PI","heightModDelta","getRoundedWithUnitCM","value","unitSuffix","factor","pow","round","version","major","Error","Viewer","prototype","measuretool","options","measuretoolInstance","Measuretool","extend","isMeasuring","buttonActiveImg","element","pixelsPerMeter","toggleButton","showMeasuretoolControl","showConfirmDenyButtons","styleConfirmDenyButtons","returnPixelCoordinates","onMeasurementCanceled","onMeasurementChanged","onMeasurementToggled","makeNeutralElement","className","lineDiv","style","border","backgroundColor","appendChild","infoDiv","color","fontWeight","padding","top","left","minWidth","textAlign","corners","i","id","background","MouseTracker","dragHandler","bind","dragEndHandler","setTimeout","bottom","right","overlay","MeasuretoolOverlay","outerTracker","clickTimeThreshold","clickDistThreshold","delegate","clickHandler","startDisabled","addEvent","container","useGroup","buttons","anyButton","onFocusHandler","onFocus","onBlurHandler","onBlur","Button","getElement","tooltip","getString","onRelease","push","imgDown","cloneNode","cancelButton","cancel","classList","add","transform","addHandler","onMeasurementChange","ControlDock","setState","enabled","setTracking","undraw","visibility","raiseEvent","enable","disable","_quadrant","document","getElementById","result","clone","real","viewportToViewerElementRectangle","fromRect","children","lineDivWidthNew","sqrt","drawLength","a","atan","update","normalize","drawHTML","drawer","destroy","viewportToImageRectangle","pixelLength","zoom","world","getItemAt","viewportToImageZoom","getZoom","currentPPM","text","innerHTML","OpenSeadragon","location","Overlay","apply","arguments","isPlainObject","Object","create","replace","Rect","equals","other","toString","swapWidthHeight","swapped","getAngleFromCenter","point","diff","fixed","fitsIn","area","getTopLeft","getTopRight","getBottomRight","getBottomLeft","areaEnd","reduceRotation","reduced"],"mappings":"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","file":"openseadragon-measuretool.min.js","sourcesContent":["(function($) {\r\n    'use strict';\r\n\r\n    if (!$.version || $.version.major < 2) {\r\n        throw new Error('This version of OpenSeadragonMeasuretool requires OpenSeadragon version 2.0.0+');\r\n    }\r\n\r\n    $.Viewer.prototype.measuretool = function(options) {\r\n        if (!this.measuretoolInstance || options) {\r\n            options = options || {};\r\n            options.viewer = this;\r\n            this.measuretoolInstance = new $.Measuretool(options);\r\n        }\r\n        return this.measuretoolInstance;\r\n    };\r\n\r\n\r\n    /**\r\n    * @class Measuretool\r\n    * @classdesc Provides functionality for measuring distance in an image\r\n    * @memberof OpenSeadragon\r\n    * @param {Object} options\r\n    */\r\n    $.Measuretool = function (options) {\r\n\r\n        $.extend( true, this, {\r\n            // internal state properties\r\n            viewer:                  null,\r\n            isMeasuring:             false,\r\n            buttonActiveImg:         false,\r\n            rectDone:                true,\r\n            quadrant:                0,\r\n            switched:                false,\r\n\r\n            // options\r\n            element:                 null,\r\n            pixelsPerMeter:          null,\r\n            toggleButton:            null,\r\n            showMeasuretoolControl:  true,\r\n            showConfirmDenyButtons:  true,\r\n            styleConfirmDenyButtons: true,\r\n            returnPixelCoordinates:  true,\r\n            keyboardShortcut:        'd',\r\n            rect:                    null,\r\n            startRotated:            false, // useful for rotated crops\r\n            startRotatedHeight: 0.1,\r\n            startAngle: 0,\r\n            onMeasurementCanceled:   null,\r\n            onMeasurementChanged:    null,\r\n            onMeasurementToggled:    null\r\n        }, options );\r\n\r\n        if (!this.element) {\r\n            this.element = $.makeNeutralElement('div');\r\n            this.element.className = 'measuretool-box';\r\n            //this.element.style.backgroundColor = 'yellow';\r\n\r\n            // add diagonal line\r\n            var lineDiv = $.makeNeutralElement('div');\r\n            lineDiv.style.position = 'absolute';\r\n            lineDiv.style.width = '100%';\r\n            lineDiv.style.height = '0px';\r\n            lineDiv.style.border = '1px solid brown';\r\n            lineDiv.style.backgroundColor = 'brown';\r\n            lineDiv.className = 'measuretool-box-line';\r\n            this.element.appendChild(lineDiv);\r\n\r\n            // add info box\r\n            var infoDiv = $.makeNeutralElement('div');\r\n            infoDiv.style.position = 'absolute';\r\n            infoDiv.style.color = 'brown';\r\n            infoDiv.style.fontWeight = 'bold';\r\n            infoDiv.style.padding = '2px';\r\n            infoDiv.style.top = '50%';\r\n            infoDiv.style.left = '50%';\r\n            infoDiv.style.minWidth = '5em';\r\n            infoDiv.style.textAlign = 'center';\r\n            infoDiv.style.backgroundColor = 'rgba(255, 255, 255, 0.6)';\r\n            infoDiv.className = 'measuretool-box-info';\r\n            this.element.appendChild(infoDiv);\r\n        }\r\n        //this.borders = this.borders || [];\r\n        var corners = [];\r\n        for (var i = 0; i < 2; i++) {\r\n            \r\n            corners[i]                  = $.makeNeutralElement('div');\r\n            corners[i].className        = 'corner-' + i + '-handle';\r\n            corners[i].id               = 'corner-' + i;\r\n            corners[i].style.position   = 'absolute';\r\n            corners[i].style.width      = '10px';\r\n            corners[i].style.height     = '10px';\r\n            corners[i].style.background = '#000';\r\n            corners[i].style.border     = '1px solid #ccc';\r\n            new $.MouseTracker({\r\n                element:     corners[i],\r\n                dragHandler: onCornerDrag.bind(this, i),\r\n                dragEndHandler: onCornerDragEnd.bind(this, i),\r\n            });\r\n\r\n            // defer corners, so they are appended last\r\n            setTimeout(this.element.appendChild.bind(this.element, corners[i]), 0);\r\n        }\r\n        corners[0].style.bottom = '-5px';\r\n        corners[0].style.left = '-5px';\r\n        corners[1].style.top = '-5px';\r\n        corners[1].style.right = '-5px';\r\n        \r\n        if (!this.overlay) {\r\n            this.overlay = new $.MeasuretoolOverlay(this.element, this.rect || new $.MeasuretoolRect());\r\n        }\r\n/*\r\n        this.innerTracker = new $.MouseTracker({\r\n            element:            this.element,\r\n            clickTimeThreshold: this.viewer.clickTimeThreshold,\r\n            clickDistThreshold: this.viewer.clickDistThreshold,\r\n          //  dragHandler:        $.delegate( this, onInsideDrag ),\r\n          //  dragEndHandler:     $.delegate( this, onInsideDragEnd ),\r\n            // keyHandler:         $.delegate( this, onKeyPress ),\r\n            clickHandler:       $.delegate( this, onClick ),\r\n            // scrollHandler:      $.delegate( this.viewer, this.viewer.innerTracker.scrollHandler ),\r\n            // pinchHandler:       $.delegate( this.viewer, this.viewer.innerTracker.pinchHandler ),\r\n        });\r\n        */\r\n        this.outerTracker = new $.MouseTracker({\r\n            element:            this.viewer.canvas,\r\n            clickTimeThreshold: this.viewer.clickTimeThreshold,\r\n            clickDistThreshold: this.viewer.clickDistThreshold,\r\n            dragHandler:        $.delegate( this, onOutsideDrag ),\r\n            dragEndHandler:     $.delegate( this, onOutsideDragEnd ),\r\n            clickHandler:       $.delegate( this, onClick ),\r\n            startDisabled:      !this.isMeasuring,\r\n        });\r\n\r\n        if (this.keyboardShortcut) {\r\n            $.addEvent(\r\n                this.viewer.container,\r\n                'keypress',\r\n                $.delegate(this, onKeyPress),\r\n                false\r\n            );\r\n        }\r\n\r\n        var useGroup = this.viewer.buttons && this.viewer.buttons.buttons;\r\n        var anyButton = useGroup ? this.viewer.buttons.buttons[0] : null;\r\n        var onFocusHandler = anyButton ? anyButton.onFocus : null;\r\n        var onBlurHandler = anyButton ? anyButton.onBlur : null;\r\n        if (this.showMeasuretoolControl) {\r\n            this.toggleButton = new $.Button({\r\n                element:    this.toggleButton ? $.getElement( this.toggleButton ) : null,\r\n                clickTimeThreshold: this.viewer.clickTimeThreshold,\r\n                clickDistThreshold: this.viewer.clickDistThreshold,\r\n                tooltip:    $.getString('Tooltips.MeasuretoolToggle') || 'Toggle measuretool',\r\n                onRelease:  this.toggleState.bind( this ),\r\n                onFocus:    onFocusHandler,\r\n                onBlur:     onBlurHandler\r\n            });\r\n            if (useGroup) {\r\n                this.viewer.buttons.buttons.push(this.toggleButton);\r\n                this.viewer.buttons.element.appendChild(this.toggleButton.element);\r\n            }\r\n            if (this.toggleButton.imgDown) {\r\n                this.buttonActiveImg = this.toggleButton.imgDown.cloneNode(true);\r\n                this.toggleButton.element.appendChild(this.buttonActiveImg);\r\n            }\r\n        }\r\n        if (this.showConfirmDenyButtons) {\r\n            this.cancelButton = new $.Button({\r\n                element:    this.cancelButton ? $.getElement( this.cancelButton ) : null,\r\n                clickTimeThreshold: this.viewer.clickTimeThreshold,\r\n                clickDistThreshold: this.viewer.clickDistThreshold,\r\n                tooltip:    $.getString('Tooltips.MeasuretoolConfirm') || 'Cancel measuretool',\r\n                onRelease:  this.cancel.bind( this ),\r\n                onFocus:    onFocusHandler,\r\n                onBlur:     onBlurHandler\r\n            });\r\n            var cancel = this.cancelButton.element;\r\n            cancel.classList.add('cancel-button');\r\n            this.element.appendChild(cancel);\r\n\r\n            if (this.styleConfirmDenyButtons) {\r\n                cancel.style.position = 'absolute';\r\n                cancel.style.top = '50%';\r\n                cancel.style.left = '50%';\r\n                cancel.style.transform = 'translate(0, -50%)';\r\n            }\r\n        }\r\n\r\n        this.viewer.addHandler('measurement_cancel', this.onMeasurementCanceled);\r\n        this.viewer.addHandler('measurement_change', this.onMeasurementChange);\r\n        this.viewer.addHandler('measurement_toggle', this.onMeasurementToggled);\r\n\r\n        this.viewer.addHandler('open', this.draw.bind(this));\r\n        this.viewer.addHandler('animation', this.draw.bind(this));\r\n        this.viewer.addHandler('resize', this.draw.bind(this));\r\n        this.viewer.addHandler('rotate', this.draw.bind(this));\r\n    };\r\n\r\n    $.extend($.Measuretool.prototype, $.ControlDock.prototype, /** @lends OpenSeadragon.Selection.prototype */{\r\n\r\n        toggleState: function() {\r\n            return this.setState(!this.isMeasuring);\r\n        },\r\n\r\n        setState: function(enabled) {\r\n            this.isMeasuring = enabled;\r\n            this.viewer.setMouseNavEnabled(!enabled);\r\n            // this.viewer.innerTracker.setTracking(!enabled);\r\n            this.outerTracker.setTracking(enabled);\r\n            enabled ? this.draw() : this.undraw();\r\n            if (this.buttonActiveImg) {\r\n                this.buttonActiveImg.style.visibility = enabled ? 'visible' : 'hidden';\r\n            }\r\n            this.viewer.raiseEvent('measurement_toggle', { enabled: enabled });\r\n            return this;\r\n        },\r\n\r\n        enable: function() {\r\n            return this.setState(true);\r\n        },\r\n\r\n        disable: function() {\r\n            return this.setState(false);\r\n        },\r\n\r\n        draw: function() {\r\n            if (this.rect) {\r\n\r\n                var _quadrant = this.quadrant;\r\n\r\n                var degrees = this.viewer.viewport.getRotation();\r\n                \r\n                if (document.getElementById('corner-0')) {\r\n                    switch (_quadrant) {\r\n                        case 0:\r\n                            document.getElementById('corner-0').style.right = '';\r\n                            document.getElementById('corner-1').style.left = '';\r\n\r\n                            document.getElementById('corner-0').style.left = '-5px';\r\n                            document.getElementById('corner-1').style.right = '-5px';\r\n                            break;\r\n                        case 1:\r\n                            document.getElementById('corner-0').style.left = '';\r\n                            document.getElementById('corner-1').style.right = '';\r\n\r\n                            document.getElementById('corner-0').style.right = '-5px';\r\n                            document.getElementById('corner-1').style.left = '-5px';\r\n                            break;\r\n                        case 2:\r\n                            document.getElementById('corner-0').style.right = '';\r\n                            document.getElementById('corner-1').style.left = '';\r\n\r\n                            document.getElementById('corner-0').style.left = '-5px';\r\n                            document.getElementById('corner-1').style.right = '-5px';\r\n                            break;\r\n                        case 3:\r\n                            document.getElementById('corner-0').style.left = '';\r\n                            document.getElementById('corner-1').style.right = '';\r\n\r\n                            document.getElementById('corner-0').style.right = '-5px';\r\n                            document.getElementById('corner-1').style.left = '-5px';\r\n                            break;\r\n                    }\r\n                }\r\n\r\n                var result = this.rect.clone();\r\n                var real = this.viewer.viewport.viewportToViewerElementRectangle(result);\r\n                real = $.MeasuretoolRect.fromRect(real);\r\n                real.rotation = result.rotation;\r\n                result = real;\r\n                \r\n                var lineDiv = this.element.children[0];\r\n                var lineDivWidthNew = Math.sqrt(Math.pow(result.width, 2) + Math.pow(result.height, 2));\r\n                this.drawLength(lineDivWidthNew);\r\n                lineDiv.style.width = lineDivWidthNew + 'px';\r\n                var a = Math.atan(result.height / result.width) * (180 / Math.PI);\r\n\r\n                if (_quadrant === 0 || _quadrant === 2) {\r\n                    if (degrees >= 270) {\r\n                        if (this.startAngle >= 270) {\r\n                            a = 90 - a;\r\n                        } else {\r\n                            a -= 90;\r\n                        }\r\n                    } else if (degrees >= 180) {\r\n                        \r\n                    } else if (degrees >= 90) {\r\n                        if (this.startAngle >= 90 && this.startAngle < 180) {\r\n                            a = 90 - a;\r\n                        } else {\r\n                            a -= 90;\r\n                        }\r\n                    }\r\n                    if (this.startAngle >= 270 && degrees >= 270 || (this.startAngle >= 90 && this.startAngle < 180 && degrees >= 90 && degrees < 180)) {\r\n                        lineDiv.style.transform = 'translateY(' + result.width / 2 + 'px) translateX(-' + (lineDivWidthNew - result.height) / 2 + 'px) rotate(-' + a + 'deg)';\r\n                    } else {\r\n                        lineDiv.style.transform = 'translateY(' + result.height / 2 + 'px) translateX(-' + (lineDivWidthNew - result.width) / 2 + 'px) rotate(-' + a + 'deg)';\r\n                    }\r\n                } else if (_quadrant === 1 || _quadrant === 3) {\r\n                    if (degrees >= 270) {\r\n                        a = 90 - a;\r\n                        lineDiv.style.transform = 'translateY(' + result.width / 2 + 'px) translateX(-' + (lineDivWidthNew - result.height) / 2 + 'px) rotate(' + a + 'deg)';\r\n                    } else if (degrees >= 180) {\r\n                        lineDiv.style.transform = 'translateY(' + result.height / 2 + 'px) translateX(-' + (lineDivWidthNew - result.width) / 2 + 'px) rotate(' + a + 'deg)';\r\n                    } else if (degrees >= 90) {\r\n                        a = 90 - a;\r\n                        lineDiv.style.transform = 'translateY(' + result.width / 2 + 'px) translateX(-' + (lineDivWidthNew - result.height) / 2 + 'px) rotate(' + a + 'deg)';\r\n                    } else {\r\n                        lineDiv.style.transform = 'translateY(' + result.height / 2 + 'px) translateX(-' + (lineDivWidthNew - result.width) / 2 + 'px) rotate(' + a + 'deg)';\r\n                    }\r\n                } /*else if (_quadrant === 2) {\r\n                    if (degrees >= 270) {\r\n                        if (this.startAngle >= 270) {\r\n                            a = 90 - a;\r\n                        } else {\r\n                            a -= 90;\r\n                        }\r\n                    } else if (degrees >= 180) {\r\n\r\n                    } else if (degrees >= 90) {\r\n                        if (this.startAngle >= 90 && this.startAngle < 180) {\r\n                            a = 90 - a;\r\n                        } else {\r\n                            a -= 90;\r\n                        }\r\n                    }\r\n                    if (this.startAngle >= 270 && degrees >= 270 || (this.startAngle >= 90 && this.startAngle < 180 && degrees >= 90 && degrees < 180)) {\r\n                        lineDiv.style.transform = 'translateY(' + result.width / 2 + 'px) translateX(-' + (lineDivWidthNew - result.height) / 2 + 'px) rotate(-' + a + 'deg)';\r\n                    } else {\r\n                        lineDiv.style.transform = 'translateY(' + result.height / 2 + 'px) translateX(-' + (lineDivWidthNew - result.width) / 2 + 'px) rotate(-' + a + 'deg)';\r\n                    }\r\n                } else if (_quadrant === 3) {\r\n                    if (degrees >= 270) {\r\n                        a = 90 - a;\r\n                        lineDiv.style.transform = 'translateY(' + result.width / 2 + 'px) translateX(-' + (lineDivWidthNew - result.height) / 2 + 'px) rotate(' + a + 'deg)';\r\n                    } else if (degrees >= 180) {\r\n                        lineDiv.style.transform = 'translateY(' + result.height / 2 + 'px) translateX(-' + (lineDivWidthNew - result.width) / 2 + 'px) rotate(' + a + 'deg)';\r\n                    } else if (degrees >= 90) {\r\n                        a = 90 - a;\r\n                        lineDiv.style.transform = 'translateY(' + result.width / 2 + 'px) translateX(-' + (lineDivWidthNew - result.height) / 2 + 'px) rotate(' + a + 'deg)';\r\n                    } else {\r\n                        lineDiv.style.transform = 'translateY(' + result.height / 2 + 'px) translateX(-' + (lineDivWidthNew - result.width) / 2 + 'px) rotate(' + a + 'deg)';\r\n                    }\r\n                } // */\r\n\r\n                this.overlay.update(this.rect.normalize());\r\n                this.overlay.drawHTML(this.viewer.drawer.container, this.viewer.viewport);\r\n            }\r\n            this.viewer.raiseEvent('measurement_change', this.rect ? this.rect.normalize() : null);\r\n            return this;\r\n        },\r\n\r\n        undraw: function() {\r\n            this.overlay.destroy();\r\n            this.rect = null;\r\n            return this;\r\n        },\r\n\r\n        cancel: function () {\r\n            if (this.rect) {\r\n                var result = this.rect.normalize();\r\n                if (this.returnPixelCoordinates) {\r\n                    var real = this.viewer.viewport.viewportToImageRectangle(result);\r\n                    real = $.MeasuretoolRect.fromRect(real).round();\r\n                    real.rotation = result.rotation;\r\n                    result = real;\r\n                }\r\n                this.viewer.raiseEvent('measurement_cancel', result);\r\n                this.undraw();\r\n            }\r\n            return this;\r\n        },\r\n\r\n        drawLength: function (pixelLength) {\r\n            var infoDiv = this.element.children[1];\r\n            var viewport = this.viewer.viewport;\r\n            var zoom = this.viewer.world.getItemAt(0).viewportToImageZoom(viewport.getZoom(true));\r\n            var currentPPM = zoom * this.pixelsPerMeter;\r\n            var text = getRoundedWithUnitCM(pixelLength / currentPPM, 'm');\r\n            infoDiv.innerHTML = text;\r\n            var degrees = this.viewer.viewport.getRotation();\r\n            infoDiv.style.transform = 'rotate(-' + degrees + 'deg)';\r\n        }\r\n\r\n    });\r\n\r\n    function onOutsideDrag(e) {\r\n        if (this.rectDone && this.rect) {\r\n            this.rectDone = false;\r\n            this.rect = null;\r\n        }\r\n        // Disable move when makeing new selection\r\n        this.viewer.setMouseNavEnabled(false);\r\n        var delta = this.viewer.viewport.deltaPointsFromPixels(e.delta, true);\r\n        var end = this.viewer.viewport.pointFromPixel(e.position, true);\r\n        var start = new $.Point(end.x - delta.x, end.y - delta.y);\r\n        var degrees = this.viewer.viewport.getRotation();\r\n        this.startAngle = degrees;\r\n        if (!this.rect) {\r\n            if (this.startRotated) {\r\n                this.rotatedStartPoint = start;\r\n                this.rect = getPrerotatedRect(start, end, this.startRotatedHeight);\r\n            } else {\r\n                this.rect = new $.MeasuretoolRect(start.x, start.y, delta.x, delta.y);\r\n            }\r\n            this.rectDone = false;\r\n        } else {\r\n            this.rect.width += delta.x;\r\n            this.rect.height += delta.y;\r\n\r\n            if (end.x - this.rect.x < 0) {\r\n                if (end.y - this.rect.y < 0) {\r\n                    this.quadrant = 1;\r\n                    this.switched = false;\r\n                } else {\r\n                    this.quadrant = 2;\r\n                    this.switched = true;\r\n                }\r\n            } else if (end.y - this.rect.y < 0) {\r\n                this.quadrant = 0;\r\n                this.switched = false;\r\n            } else {\r\n                this.quadrant = 3;\r\n                this.switched = true;\r\n            }\r\n\r\n            //msg(this.quadrant + (this.switched ? \" switched\" : \"\"), \"#000\", 1, true);\r\n        }\r\n        this.draw();\r\n    }\r\n\r\n    function onOutsideDragEnd() {\r\n        // Enable move after new selection is done\r\n        this.viewer.setMouseNavEnabled(true);\r\n        this.rectDone = true;\r\n\r\n        //this.outerTracker.setTracking(false);\r\n    }\r\n\r\n    function onClick() {\r\n        this.viewer.canvas.focus();\r\n    }\r\n\r\n    function onCornerDrag(corner, e) {\r\n        var delta = e.delta;\r\n        var rotation = this.rect.getDegreeRotation();\r\n        var degrees = this.viewer.viewport.getRotation();\r\n        this.startAngle = degrees;\r\n        var center;\r\n        if (rotation !== 0) {\r\n            // adjust vector\r\n            delta = delta.rotate(-1 * rotation, new $.Point(0, 0));\r\n            center = this.rect.getCenter();\r\n        }\r\n        delta = this.viewer.viewport.deltaPointsFromPixels(delta, true);\r\n        var currentCorner = corner;\r\n        if (this.switched) {\r\n            currentCorner = 1 - currentCorner;\r\n        }\r\n        switch (currentCorner) {\r\n            case 0:\r\n                this.rect.y += delta.y;\r\n                this.rect.height -= delta.y;\r\n                this.rect.x += delta.x;\r\n                this.rect.width -= delta.x;\r\n                break;\r\n            case 1:\r\n                this.rect.width += delta.x;\r\n                this.rect.height += delta.y;\r\n                break;\r\n        }\r\n        \r\n        if (this.rect.width < 0) {\r\n            if (this.rect.height < 0) {\r\n                this.quadrant = 1;\r\n            } else {\r\n                this.quadrant = 2;\r\n            }\r\n        } else if (this.rect.height < 0) {\r\n            this.quadrant = 0;\r\n        } else {\r\n            this.quadrant = 3;\r\n        }\r\n\r\n        if (corner === 0) {\r\n            this.quadrant = (this.quadrant + 2) % 4;\r\n        }\r\n\r\n        if (rotation !== 0) {\r\n            // calc center deviation\r\n            var newCenter = this.rect.getCenter();\r\n            // rotate new center around old\r\n            var target = newCenter.rotate(rotation, center);\r\n            // adjust new center\r\n            delta = target.minus(newCenter);\r\n            this.rect.x += delta.x;\r\n            this.rect.y += delta.y;\r\n        }\r\n\r\n        //msg(this.quadrant + (this.switched ? \" switched\" : \"\"), \"#000\", 1, true);\r\n\r\n        this.draw();\r\n    }\r\n\r\n\r\n    function onCornerDragEnd(corner) {\r\n        if (corner === 0) {\r\n            this.switched = this.quadrant === 0 || this.quadrant === 1;\r\n        }\r\n        else if (corner === 1) {\r\n            this.switched = this.quadrant === 2 || this.quadrant === 3;\r\n        }\r\n    }\r\n\r\n    function onKeyPress(e) {\r\n        var key = e.keyCode ? e.keyCode : e.charCode;\r\n        if (key === 13) {\r\n            this.confirm();\r\n        } else if (String.fromCharCode(key) === this.keyboardShortcut) {\r\n            this.toggleState();\r\n        }\r\n    }\r\n\r\n    function getPrerotatedRect(start, end, height) {\r\n        if (start.x > end.x) {\r\n            // always draw left to right\r\n            var x = start;\r\n            start = end;\r\n            end = x;\r\n        }\r\n        var delta = end.minus(start);\r\n        var dist = start.distanceTo(end);\r\n        var angle = -1 * Math.atan2(delta.x, delta.y) + (Math.PI / 2);\r\n        var center = new $.Point(\r\n            delta.x / 2 + start.x,\r\n            delta.y / 2 + start.y\r\n        );\r\n        var rect = new $.MeasuretoolRect(\r\n            center.x - (dist / 2),\r\n            center.y - (height / 2),\r\n            dist,\r\n            height,\r\n            angle\r\n        );\r\n        var heightModDelta = new $.Point(0, height);\r\n        heightModDelta = heightModDelta.rotate(rect.getDegreeRotation(), new $.Point(0, 0));\r\n        rect.x += heightModDelta.x / 2;\r\n        rect.y += heightModDelta.y / 2;\r\n        return rect;\r\n    }\r\n\r\n    function getRoundedWithUnitCM(value, unitSuffix) {\r\n        var factor = value < 0.0001 ? Math.pow(10, 3) : Math.pow(10, 2);\r\n        return Math.round(factor * value * 100) / factor + ' c' + unitSuffix;\r\n    }\r\n\r\n\r\n})(OpenSeadragon);\r\n","(function( $ ){\r\n    'use strict';\r\n\r\n    /**\r\n     * @class Overlay\r\n     * @classdesc Provides a way to float an HTML element on top of the viewer element.\r\n     *\r\n     * @memberof OpenSeadragon\r\n     * @param {Object} options\r\n     * @param {Element} options.element\r\n     * @param {OpenSeadragon.Point|OpenSeadragon.Rect|OpenSeadragon.SelectionRect} options.location - The\r\n     * location of the overlay on the image. If a {@link OpenSeadragon.Point}\r\n     * is specified, the overlay will keep a constant size independently of the\r\n     * zoom. If a {@link OpenSeadragon.Rect} is specified, the overlay size will\r\n     * be adjusted when the zoom changes.\r\n     * @param {OpenSeadragon.OverlayPlacement} [options.placement=OpenSeadragon.OverlayPlacement.TOP_LEFT]\r\n     * Relative position to the viewport.\r\n     * Only used if location is a {@link OpenSeadragon.Point}.\r\n     * @param {OpenSeadragon.Overlay.OnDrawCallback} [options.onDraw]\r\n     * @param {Boolean} [options.checkResize=true] Set to false to avoid to\r\n     * check the size of the overlay everytime it is drawn when using a\r\n     * {@link OpenSeadragon.Point} as options.location. It will improve\r\n     * performances but will cause a misalignment if the overlay size changes.\r\n     */\r\n    $.MeasuretoolOverlay = function( element, location) {\r\n        $.Overlay.apply( this, arguments );\r\n\r\n        // set the rotation in radians\r\n        if ( $.isPlainObject( element ) ) {\r\n            this.rotation = element.location.rotation || 0;\r\n        } else {\r\n            this.rotation = location.rotation || 0;\r\n        }\r\n    };\r\n\r\n    $.MeasuretoolOverlay.prototype = $.extend(Object.create($.Overlay.prototype), {\r\n\r\n        /**\r\n         * @function\r\n         * @param {Element} container\r\n         */\r\n        drawHTML: function() {\r\n            $.Overlay.prototype.drawHTML.apply( this, arguments );\r\n            this.style.transform = this.style.transform.replace(/ ?rotate\\(.+rad\\)/, '') +\r\n                ' rotate(' + this.rotation + 'rad)';\r\n        },\r\n\r\n        /**\r\n         * @function\r\n         * @param {OpenSeadragon.Point|OpenSeadragon.Rect} location\r\n         * @param {OpenSeadragon.OverlayPlacement} position\r\n         */\r\n        update: function( location ) {\r\n            $.Overlay.prototype.update.apply( this, arguments );\r\n            this.rotation = location.rotation || 0;\r\n        }\r\n    });\r\n\r\n}( OpenSeadragon ));\r\n","(function( $ ){\r\n    'use strict';\r\n\r\n    /**\r\n     * @class MeasuretoolRect\r\n     * @classdesc A display rectangle is very similar to {@link OpenSeadragon.Rect} but adds rotation\r\n     * around the center point\r\n     *\r\n     * @memberof OpenSeadragon\r\n     * @extends OpenSeadragon.Rect\r\n     * @param {Number} x The vector component 'x'.\r\n     * @param {Number} y The vector component 'y'.\r\n     * @param {Number} width The vector component 'height'.\r\n     * @param {Number} height The vector component 'width'.\r\n     * @param {Number} rotation The rotation in radians\r\n     */\r\n    $.MeasuretoolRect = function( x, y, width, height, rotation ) {\r\n        $.Rect.apply( this, [ x, y, width, height ] );\r\n\r\n        /**\r\n         * The rotation in radians\r\n         * @member {Number} rotation\r\n         * @memberof OpenSeadragon.MeasuretoolRect#\r\n         */\r\n        this.rotation = rotation || 0;\r\n    };\r\n\r\n    $.MeasuretoolRect.fromRect = function(rect) {\r\n        return new $.MeasuretoolRect(\r\n            rect.x,\r\n            rect.y,\r\n            rect.width,\r\n            rect.height\r\n        );\r\n    };\r\n\r\n    $.MeasuretoolRect.prototype = $.extend( Object.create($.Rect.prototype), {\r\n\r\n        /**\r\n         * @function\r\n         * @returns {OpenSeadragon.Rect} a duplicate of this Rect\r\n         */\r\n        clone: function() {\r\n            return new $.MeasuretoolRect(this.x, this.y, this.width, this.height, this.rotation);\r\n        },\r\n\r\n        /**\r\n         * Determines if two Rectangles have equivalent components.\r\n         * @function\r\n         * @param {OpenSeadragon.Rect} rectangle The Rectangle to compare to.\r\n         * @return {Boolean} 'true' if all components are equal, otherwise 'false'.\r\n         */\r\n        equals: function( other ) {\r\n            return $.Rect.prototype.equals.apply(this, [ other ]) &&\r\n                ( this.rotation === other.rotation );\r\n        },\r\n\r\n        /**\r\n         * Provides a string representation of the rectangle which is useful for\r\n         * debugging.\r\n         * @function\r\n         * @returns {String} A string representation of the rectangle.\r\n         */\r\n        toString: function() {\r\n            return '[' +\r\n                (Math.round(this.x*100) / 100) + ',' +\r\n                (Math.round(this.y*100) / 100) + ',' +\r\n                (Math.round(this.width*100) / 100) + 'x' +\r\n                (Math.round(this.height*100) / 100) + '@' +\r\n                (Math.round(this.rotation*100) / 100) +\r\n            ']';\r\n        },\r\n\r\n        swapWidthHeight: function() {\r\n            var swapped = this.clone();\r\n            swapped.width = this.height;\r\n            swapped.height = this.width;\r\n            swapped.x += (this.width - this.height) / 2;\r\n            swapped.y += (this.height - this.width) / 2;\r\n            return swapped;\r\n        },\r\n\r\n        /**\r\n         * @function\r\n         * @returns {Number} The rotaion in degrees\r\n         */\r\n        getDegreeRotation: function() {\r\n            return this.rotation * (180/Math.PI);\r\n        },\r\n\r\n        /**\r\n         * @function\r\n         * @param {OpenSeadragon.Point} point\r\n         * @returns {Number} The angle in radians\r\n         */\r\n        getAngleFromCenter: function(point) {\r\n            var diff = point.minus(this.getCenter());\r\n            return Math.atan2(diff.x, diff.y);\r\n        },\r\n\r\n        /**\r\n         * Rounds pixel coordinates\r\n         * @function\r\n         * @returns {MeasuretoolRect} The altered rect\r\n         */\r\n        round: function() {\r\n            return new $.MeasuretoolRect(\r\n                Math.round(this.x),\r\n                Math.round(this.y),\r\n                Math.round(this.width),\r\n                Math.round(this.height),\r\n                this.rotation\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Fixes negative width/height, rotation larger than PI\r\n         * @function\r\n         * @returns {MeasuretoolRect} The normalized rect\r\n         */\r\n        normalize: function() {\r\n            var fixed = this.clone();\r\n            if (fixed.width < 0) {\r\n                fixed.x += fixed.width;\r\n                fixed.width *= -1;\r\n            }\r\n            if (fixed.height < 0) {\r\n                fixed.y += fixed.height;\r\n                fixed.height *= -1;\r\n            }\r\n            fixed.rotation %= Math.PI;\r\n            return fixed;\r\n        },\r\n\r\n        /**\r\n         * @function\r\n         * @param {OpenSeadragon.Rect} area\r\n         * @returns {Boolean} Does this rect fit in a specified area\r\n         */\r\n        fitsIn: function(area) {\r\n            var rect = this.normalize();\r\n            var corners = [\r\n                rect.getTopLeft(),\r\n                rect.getTopRight(),\r\n                rect.getBottomRight(),\r\n                rect.getBottomLeft(),\r\n            ];\r\n            var center = rect.getCenter();\r\n            var rotation = rect.getDegreeRotation();\r\n            var areaEnd = area.getBottomRight();\r\n            for (var i = 0; i < 4; i++) {\r\n                corners[i] = corners[i].rotate(rotation, center);\r\n                if (corners[i].x < area.x || corners[i].x > areaEnd.x ||\r\n                    corners[i].y < area.y || corners[i].y > areaEnd.y) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Reduces rotation to within [-45, 45] degrees by swapping width & height\r\n         * @function\r\n         * @returns {MeasuretoolRect} The altered rect\r\n         */\r\n        reduceRotation: function() {\r\n            var reduced;\r\n            if (this.rotation < Math.PI / (-4)) {\r\n                reduced = this.swapWidthHeight();\r\n                reduced.rotation += Math.PI / 2;\r\n            } else if (this.rotation > Math.PI / 4) {\r\n                reduced = this.swapWidthHeight();\r\n                reduced.rotation -= Math.PI / 2;\r\n            } else {\r\n                reduced = this.clone();\r\n            }\r\n            return reduced;\r\n        },\r\n    });\r\n\r\n}( OpenSeadragon ));\r\n"]}