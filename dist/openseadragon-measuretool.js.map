{"version":3,"sources":["measuretool.js","measuretooloverlay.js","measuretoolrect.js"],"names":["$","onOutsideDrag","e","this","rectDone","rect","viewer","setMouseNavEnabled","delta","viewport","deltaPointsFromPixels","end","pointFromPixel","position","start","Point","x","y","degrees","getRotation","startAngle","width","height","quadrant","switched","startRotated","rotatedStartPoint","getPrerotatedRect","startRotatedHeight","MeasuretoolRect","draw","onOutsideDragEnd","onClick","canvas","focus","onCornerDrag","corner","rotation","getDegreeRotation","center","rotate","getCenter","currentCorner","newCenter","target","minus","onCornerDragEnd","onKeyPress","key","keyCode","charCode","confirm","String","fromCharCode","keyboardShortcut","toggleState","dist","distanceTo","angle","Math","atan2","PI","heightModDelta","getWithUnit","value","unitSuffix","getRoundedWithUnit","sig","factor","pow","round","version","major","Error","Viewer","prototype","measuretool","options","measuretoolInstance","Measuretool","extend","isMeasuring","buttonActiveImg","element","pixelsPerMeter","toggleButton","showMeasuretoolControl","showConfirmDenyButtons","styleConfirmDenyButtons","returnPixelCoordinates","onMeasurementCanceled","onMeasurementChanged","onMeasurementToggled","prefixUrl","navImages","REST","GROUP","HOVER","DOWN","measuretoolCancel","makeNeutralElement","className","lineDiv","style","border","backgroundColor","appendChild","infoDiv","color","fontWeight","padding","top","left","minWidth","textAlign","corners","i","id","background","MouseTracker","dragHandler","bind","dragEndHandler","setTimeout","bottom","right","overlay","MeasuretoolOverlay","outerTracker","clickTimeThreshold","clickDistThreshold","delegate","clickHandler","startDisabled","addEvent","container","prefix","useGroup","buttons","anyButton","onFocusHandler","onFocus","onBlurHandler","onBlur","Button","getElement","tooltip","getString","srcRest","srcGroup","srcHover","srcDown","onRelease","push","imgDown","cloneNode","cancelButton","cancel","classList","add","transform","addHandler","onMeasurementChange","ControlDock","setState","enabled","setTracking","undraw","visibility","raiseEvent","enable","disable","quadrant_tmp","document","getElementById","result","clone","real","viewportToViewerElementRectangle","fromRect","children","lineDivWidthNew","sqrt","drawLength","a","atan","update","normalize","drawHTML","drawer","destroy","viewportToImageRectangle","pixelLength","zoom","world","getItemAt","viewportToImageZoom","getZoom","currentPPM","text","innerHTML","OpenSeadragon","location","Overlay","apply","arguments","isPlainObject","Object","create","replace","Rect","equals","other","toString","swapWidthHeight","swapped","getAngleFromCenter","point","diff","fixed","fitsIn","area","getTopLeft","getTopRight","getBottomRight","getBottomLeft","areaEnd","reduceRotation","reduced"],"mappings":"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","file":"openseadragon-measuretool.js","sourcesContent":["(function($) {\r\n    'use strict';\r\n\r\n    if (!$.version || $.version.major < 2) {\r\n        throw new Error('This version of OpenSeadragonMeasuretool requires OpenSeadragon version 2.0.0+');\r\n    }\r\n\r\n    $.Viewer.prototype.measuretool = function(options) {\r\n        if (!this.measuretoolInstance || options) {\r\n            options = options || {};\r\n            options.viewer = this;\r\n            this.measuretoolInstance = new $.Measuretool(options);\r\n        }\r\n        return this.measuretoolInstance;\r\n    };\r\n\r\n\r\n    /**\r\n    * @class Measuretool\r\n    * @classdesc Provides functionality for measuring distance in an image\r\n    * @memberof OpenSeadragon\r\n    * @param {Object} options\r\n    */\r\n    $.Measuretool = function (options) {\r\n\r\n        $.extend( true, this, {\r\n            // internal state properties\r\n            viewer:                  null,\r\n            isMeasuring:             false,\r\n            buttonActiveImg:         false,\r\n            rectDone:                true,\r\n            quadrant:                0,\r\n            switched:                false,\r\n\r\n            // options\r\n            element:                 null,\r\n            pixelsPerMeter:          null,\r\n            toggleButton:            null,\r\n            showMeasuretoolControl:  true,\r\n            showConfirmDenyButtons:  true,\r\n            styleConfirmDenyButtons: true,\r\n            returnPixelCoordinates:  true,\r\n            keyboardShortcut:        'd',\r\n            rect:                    null,\r\n            startRotated:            false, // useful for rotated crops\r\n            startRotatedHeight: 0.1,\r\n            startAngle: 0,\r\n            onMeasurementCanceled:   null,\r\n            onMeasurementChanged:    null,\r\n            onMeasurementToggled:    null,\r\n            prefixUrl:               null,\r\n            navImages:               {\r\n                measuretool: {\r\n                    REST:   'measuretool_rest.png',\r\n                    GROUP:  'measuretool_grouphover.png',\r\n                    HOVER:  'measuretool_hover.png',\r\n                    DOWN:   'measuretool_pressed.png'\r\n                },\r\n                measuretoolCancel: {\r\n                    REST:   'measuretool_cancel_rest.png',\r\n                    GROUP:  'measuretool_cancel_grouphover.png',\r\n                    HOVER:  'measuretool_cancel_hover.png',\r\n                    DOWN:   'measuretool_cancel_pressed.png'\r\n                },\r\n            }\r\n        }, options );\r\n\r\n        $.extend( true, this.navImages, this.viewer.navImages );\r\n\r\n        if (!this.element) {\r\n            this.element = $.makeNeutralElement('div');\r\n            this.element.className = 'measuretool-box';\r\n            //this.element.style.backgroundColor = 'yellow';\r\n\r\n            // add diagonal line\r\n            var lineDiv = $.makeNeutralElement('div');\r\n            lineDiv.style.position = 'absolute';\r\n            lineDiv.style.width = '100%';\r\n            lineDiv.style.height = '0px';\r\n            lineDiv.style.border = '1px solid brown';\r\n            lineDiv.style.backgroundColor = 'brown';\r\n            lineDiv.className = 'measuretool-box-line';\r\n            this.element.appendChild(lineDiv);\r\n\r\n            // add info box\r\n            var infoDiv = $.makeNeutralElement('div');\r\n            infoDiv.style.position = 'absolute';\r\n            infoDiv.style.color = 'brown';\r\n            infoDiv.style.fontWeight = 'bold';\r\n            infoDiv.style.padding = '2px';\r\n            infoDiv.style.top = '50%';\r\n            infoDiv.style.left = '50%';\r\n            infoDiv.style.minWidth = '5em';\r\n            infoDiv.style.textAlign = 'center';\r\n            infoDiv.style.backgroundColor = 'rgba(255, 255, 255, 0.6)';\r\n            infoDiv.className = 'measuretool-box-info';\r\n            this.element.appendChild(infoDiv);\r\n        }\r\n        //this.borders = this.borders || [];\r\n        var corners = [];\r\n        for (var i = 0; i < 2; i++) {\r\n            \r\n            corners[i]                  = $.makeNeutralElement('div');\r\n            corners[i].className        = 'corner-' + i + '-handle';\r\n            corners[i].id               = 'corner-' + i;\r\n            corners[i].style.position   = 'absolute';\r\n            corners[i].style.width      = '10px';\r\n            corners[i].style.height     = '10px';\r\n            corners[i].style.background = '#000';\r\n            corners[i].style.border     = '1px solid #ccc';\r\n            new $.MouseTracker({\r\n                element:     corners[i],\r\n                dragHandler: onCornerDrag.bind(this, i),\r\n                dragEndHandler: onCornerDragEnd.bind(this, i),\r\n            });\r\n\r\n            // defer corners, so they are appended last\r\n            setTimeout(this.element.appendChild.bind(this.element, corners[i]), 0);\r\n        }\r\n        corners[0].style.bottom = '-5px';\r\n        corners[0].style.left = '-5px';\r\n        corners[1].style.top = '-5px';\r\n        corners[1].style.right = '-5px';\r\n        \r\n        if (!this.overlay) {\r\n            this.overlay = new $.MeasuretoolOverlay(this.element, this.rect || new $.MeasuretoolRect());\r\n        }\r\n/*\r\n        this.innerTracker = new $.MouseTracker({\r\n            element:            this.element,\r\n            clickTimeThreshold: this.viewer.clickTimeThreshold,\r\n            clickDistThreshold: this.viewer.clickDistThreshold,\r\n          //  dragHandler:        $.delegate( this, onInsideDrag ),\r\n          //  dragEndHandler:     $.delegate( this, onInsideDragEnd ),\r\n            // keyHandler:         $.delegate( this, onKeyPress ),\r\n            clickHandler:       $.delegate( this, onClick ),\r\n            // scrollHandler:      $.delegate( this.viewer, this.viewer.innerTracker.scrollHandler ),\r\n            // pinchHandler:       $.delegate( this.viewer, this.viewer.innerTracker.pinchHandler ),\r\n        });\r\n        */\r\n        this.outerTracker = new $.MouseTracker({\r\n            element:            this.viewer.canvas,\r\n            clickTimeThreshold: this.viewer.clickTimeThreshold,\r\n            clickDistThreshold: this.viewer.clickDistThreshold,\r\n            dragHandler:        $.delegate( this, onOutsideDrag ),\r\n            dragEndHandler:     $.delegate( this, onOutsideDragEnd ),\r\n            clickHandler:       $.delegate( this, onClick ),\r\n            startDisabled:      !this.isMeasuring,\r\n        });\r\n\r\n        if (this.keyboardShortcut) {\r\n            $.addEvent(\r\n                this.viewer.container,\r\n                'keypress',\r\n                $.delegate(this, onKeyPress),\r\n                false\r\n            );\r\n        }\r\n\r\n        var prefix = this.prefixUrl || this.viewer.prefixUrl || '';\r\n        var useGroup = this.viewer.buttons && this.viewer.buttons.buttons;\r\n        var anyButton = useGroup ? this.viewer.buttons.buttons[0] : null;\r\n        var onFocusHandler = anyButton ? anyButton.onFocus : null;\r\n        var onBlurHandler = anyButton ? anyButton.onBlur : null;\r\n        if (this.showMeasuretoolControl) {\r\n            this.toggleButton = new $.Button({\r\n                element:    this.toggleButton ? $.getElement( this.toggleButton ) : null,\r\n                clickTimeThreshold: this.viewer.clickTimeThreshold,\r\n                clickDistThreshold: this.viewer.clickDistThreshold,\r\n                tooltip:    $.getString('Tooltips.MeasuretoolToggle') || 'Toggle measuretool',\r\n                srcRest:    prefix + this.navImages.measuretool.REST,\r\n                srcGroup:   prefix + this.navImages.measuretool.GROUP,\r\n                srcHover:   prefix + this.navImages.measuretool.HOVER,\r\n                srcDown:    prefix + this.navImages.measuretool.DOWN,\r\n                onRelease:  this.toggleState.bind( this ),\r\n                onFocus:    onFocusHandler,\r\n                onBlur:     onBlurHandler\r\n            });\r\n            if (useGroup) {\r\n                this.viewer.buttons.buttons.push(this.toggleButton);\r\n                this.viewer.buttons.element.appendChild(this.toggleButton.element);\r\n            }\r\n            if (this.toggleButton.imgDown) {\r\n                this.buttonActiveImg = this.toggleButton.imgDown.cloneNode(true);\r\n                this.toggleButton.element.appendChild(this.buttonActiveImg);\r\n            }\r\n        }\r\n        if (this.showConfirmDenyButtons) {\r\n            this.cancelButton = new $.Button({\r\n                element:    this.cancelButton ? $.getElement( this.cancelButton ) : null,\r\n                clickTimeThreshold: this.viewer.clickTimeThreshold,\r\n                clickDistThreshold: this.viewer.clickDistThreshold,\r\n                tooltip:    $.getString('Tooltips.MeasuretoolConfirm') || 'Cancel measuretool',\r\n                srcRest:    prefix + this.navImages.measuretoolCancel.REST,\r\n                srcGroup:   prefix + this.navImages.measuretoolCancel.GROUP,\r\n                srcHover:   prefix + this.navImages.measuretoolCancel.HOVER,\r\n                srcDown:    prefix + this.navImages.measuretoolCancel.DOWN,\r\n                onRelease:  this.cancel.bind( this ),\r\n                onFocus:    onFocusHandler,\r\n                onBlur:     onBlurHandler\r\n            });\r\n            var cancel = this.cancelButton.element;\r\n            cancel.classList.add('cancel-button');\r\n            this.element.appendChild(cancel);\r\n\r\n            if (this.styleConfirmDenyButtons) {\r\n                cancel.style.position = 'absolute';\r\n                cancel.style.top = '50%';\r\n                cancel.style.left = '50%';\r\n                cancel.style.transform = 'translate(0, -50%)';\r\n            }\r\n        }\r\n\r\n        this.viewer.addHandler('measurement_cancel', this.onMeasurementCanceled);\r\n        this.viewer.addHandler('measurement_change', this.onMeasurementChange);\r\n        this.viewer.addHandler('measurement_toggle', this.onMeasurementToggled);\r\n\r\n        this.viewer.addHandler('open', this.draw.bind(this));\r\n        this.viewer.addHandler('animation', this.draw.bind(this));\r\n        this.viewer.addHandler('resize', this.draw.bind(this));\r\n        this.viewer.addHandler('rotate', this.draw.bind(this));\r\n    };\r\n\r\n    $.extend($.Measuretool.prototype, $.ControlDock.prototype, /** @lends OpenSeadragon.Selection.prototype */{\r\n\r\n        toggleState: function() {\r\n            return this.setState(!this.isMeasuring);\r\n        },\r\n\r\n        setState: function(enabled) {\r\n            this.isMeasuring = enabled;\r\n            // this.viewer.innerTracker.setTracking(!enabled);\r\n            this.outerTracker.setTracking(enabled);\r\n            enabled ? this.draw() : this.undraw();\r\n            if (this.buttonActiveImg) {\r\n                this.buttonActiveImg.style.visibility = enabled ? 'visible' : 'hidden';\r\n            }\r\n            this.viewer.raiseEvent('measurement_toggle', { enabled: enabled });\r\n            return this;\r\n        },\r\n\r\n        enable: function() {\r\n            return this.setState(true);\r\n        },\r\n\r\n        disable: function() {\r\n            return this.setState(false);\r\n        },\r\n\r\n        draw: function() {\r\n            if (this.rect) {\r\n\r\n                var quadrant_tmp = this.quadrant;\r\n\r\n                var degrees = viewer.viewport.getRotation();\r\n                \r\n                if (document.getElementById('corner-0')) {\r\n                    switch (quadrant_tmp) {\r\n                        case 0:\r\n                            document.getElementById('corner-0').style.right = '';\r\n                            document.getElementById('corner-1').style.left = '';\r\n\r\n                            document.getElementById('corner-0').style.left = '-5px';\r\n                            document.getElementById('corner-1').style.right = '-5px';\r\n                            break;\r\n                        case 1:\r\n                            document.getElementById('corner-0').style.left = '';\r\n                            document.getElementById('corner-1').style.right = '';\r\n\r\n                            document.getElementById('corner-0').style.right = '-5px';\r\n                            document.getElementById('corner-1').style.left = '-5px';\r\n                            break;\r\n                        case 2:\r\n                            document.getElementById('corner-0').style.right = '';\r\n                            document.getElementById('corner-1').style.left = '';\r\n\r\n                            document.getElementById('corner-0').style.left = '-5px';\r\n                            document.getElementById('corner-1').style.right = '-5px';\r\n                            break;\r\n                        case 3:\r\n                            document.getElementById('corner-0').style.left = '';\r\n                            document.getElementById('corner-1').style.right = '';\r\n\r\n                            document.getElementById('corner-0').style.right = '-5px';\r\n                            document.getElementById('corner-1').style.left = '-5px';\r\n                            break;\r\n                    }\r\n                }\r\n\r\n                var result = this.rect.clone();\r\n                var real = this.viewer.viewport.viewportToViewerElementRectangle(result);\r\n                real = $.MeasuretoolRect.fromRect(real);\r\n                real.rotation = result.rotation;\r\n                result = real;\r\n                \r\n                var lineDiv = this.element.children[0];\r\n                var lineDivWidthNew = Math.sqrt(Math.pow(result.width, 2) + Math.pow(result.height, 2));\r\n                this.drawLength(lineDivWidthNew);\r\n                lineDiv.style.width = lineDivWidthNew + 'px';\r\n                var a = Math.atan(result.height / result.width) * (180 / Math.PI);\r\n\r\n                if (quadrant_tmp === 0 || quadrant_tmp === 2) {\r\n                    if (degrees >= 270) {\r\n                        if (this.startAngle >= 270) {\r\n                            a = 90 - a;\r\n                        } else {\r\n                            a -= 90;\r\n                        }\r\n                    } else if (degrees >= 180) {\r\n                        \r\n                    } else if (degrees >= 90) {\r\n                        if (this.startAngle >= 90 && this.startAngle < 180) {\r\n                            a = 90 - a;\r\n                        } else {\r\n                            a -= 90;\r\n                        }\r\n                    }\r\n                    if (this.startAngle >= 270 && degrees >= 270 || (this.startAngle >= 90 && this.startAngle < 180 && degrees >= 90 && degrees < 180)) {\r\n                        lineDiv.style.transform = 'translateY(' + result.width / 2 + 'px) translateX(-' + (lineDivWidthNew - result.height) / 2 + 'px) rotate(-' + a + 'deg)';\r\n                    } else {\r\n                        lineDiv.style.transform = 'translateY(' + result.height / 2 + 'px) translateX(-' + (lineDivWidthNew - result.width) / 2 + 'px) rotate(-' + a + 'deg)';\r\n                    }\r\n                } else if (quadrant_tmp === 1 || quadrant_tmp === 3) {\r\n                    if (degrees >= 270) {\r\n                        a = 90 - a;\r\n                        lineDiv.style.transform = 'translateY(' + result.width / 2 + 'px) translateX(-' + (lineDivWidthNew - result.height) / 2 + 'px) rotate(' + a + 'deg)';\r\n                    } else if (degrees >= 180) {\r\n                        lineDiv.style.transform = 'translateY(' + result.height / 2 + 'px) translateX(-' + (lineDivWidthNew - result.width) / 2 + 'px) rotate(' + a + 'deg)';\r\n                    } else if (degrees >= 90) {\r\n                        a = 90 - a;\r\n                        lineDiv.style.transform = 'translateY(' + result.width / 2 + 'px) translateX(-' + (lineDivWidthNew - result.height) / 2 + 'px) rotate(' + a + 'deg)';\r\n                    } else {\r\n                        lineDiv.style.transform = 'translateY(' + result.height / 2 + 'px) translateX(-' + (lineDivWidthNew - result.width) / 2 + 'px) rotate(' + a + 'deg)';\r\n                    }\r\n                } /*else if (quadrant_tmp === 2) {\r\n                    if (degrees >= 270) {\r\n                        if (this.startAngle >= 270) {\r\n                            a = 90 - a;\r\n                        } else {\r\n                            a -= 90;\r\n                        }\r\n                    } else if (degrees >= 180) {\r\n\r\n                    } else if (degrees >= 90) {\r\n                        if (this.startAngle >= 90 && this.startAngle < 180) {\r\n                            a = 90 - a;\r\n                        } else {\r\n                            a -= 90;\r\n                        }\r\n                    }\r\n                    if (this.startAngle >= 270 && degrees >= 270 || (this.startAngle >= 90 && this.startAngle < 180 && degrees >= 90 && degrees < 180)) {\r\n                        lineDiv.style.transform = 'translateY(' + result.width / 2 + 'px) translateX(-' + (lineDivWidthNew - result.height) / 2 + 'px) rotate(-' + a + 'deg)';\r\n                    } else {\r\n                        lineDiv.style.transform = 'translateY(' + result.height / 2 + 'px) translateX(-' + (lineDivWidthNew - result.width) / 2 + 'px) rotate(-' + a + 'deg)';\r\n                    }\r\n                } else if (quadrant_tmp === 3) {\r\n                    if (degrees >= 270) {\r\n                        a = 90 - a;\r\n                        lineDiv.style.transform = 'translateY(' + result.width / 2 + 'px) translateX(-' + (lineDivWidthNew - result.height) / 2 + 'px) rotate(' + a + 'deg)';\r\n                    } else if (degrees >= 180) {\r\n                        lineDiv.style.transform = 'translateY(' + result.height / 2 + 'px) translateX(-' + (lineDivWidthNew - result.width) / 2 + 'px) rotate(' + a + 'deg)';\r\n                    } else if (degrees >= 90) {\r\n                        a = 90 - a;\r\n                        lineDiv.style.transform = 'translateY(' + result.width / 2 + 'px) translateX(-' + (lineDivWidthNew - result.height) / 2 + 'px) rotate(' + a + 'deg)';\r\n                    } else {\r\n                        lineDiv.style.transform = 'translateY(' + result.height / 2 + 'px) translateX(-' + (lineDivWidthNew - result.width) / 2 + 'px) rotate(' + a + 'deg)';\r\n                    }\r\n                } // */\r\n\r\n                this.overlay.update(this.rect.normalize());\r\n                this.overlay.drawHTML(this.viewer.drawer.container, this.viewer.viewport);\r\n            }\r\n            this.viewer.raiseEvent('measurement_change', this.rect ? this.rect.normalize() : null);\r\n            return this;\r\n        },\r\n\r\n        undraw: function() {\r\n            this.overlay.destroy();\r\n            this.rect = null;\r\n            return this;\r\n        },\r\n\r\n        cancel: function () {\r\n            if (this.rect) {\r\n                var result = this.rect.normalize();\r\n                if (this.returnPixelCoordinates) {\r\n                    var real = this.viewer.viewport.viewportToImageRectangle(result);\r\n                    real = $.MeasuretoolRect.fromRect(real).round();\r\n                    real.rotation = result.rotation;\r\n                    result = real;\r\n                }\r\n                this.viewer.raiseEvent('measurement_cancel', result);\r\n                this.undraw();\r\n            }\r\n            return this;\r\n        },\r\n\r\n        drawLength: function (pixelLength) {\r\n            var infoDiv = this.element.children[1];\r\n            var viewport = this.viewer.viewport;\r\n            var zoom = this.viewer.world.getItemAt(0).viewportToImageZoom(viewport.getZoom(true));\r\n            var currentPPM = zoom * this.pixelsPerMeter;\r\n            var text = getRoundedWithUnit(pixelLength / currentPPM, 2, 'm');\r\n            infoDiv.innerHTML = text;\r\n            var degrees = viewer.viewport.getRotation();\r\n            infoDiv.style.transform = 'rotate(-' + degrees + 'deg)';\r\n        }\r\n\r\n    });\r\n\r\n    function onOutsideDrag(e) {\r\n        if (this.rectDone && this.rect) {\r\n            this.rectDone = false;\r\n            this.rect = null;\r\n        }\r\n        // Disable move when makeing new selection\r\n        this.viewer.setMouseNavEnabled(false);\r\n        var delta = this.viewer.viewport.deltaPointsFromPixels(e.delta, true);\r\n        var end = this.viewer.viewport.pointFromPixel(e.position, true);\r\n        var start = new $.Point(end.x - delta.x, end.y - delta.y);\r\n        var degrees = viewer.viewport.getRotation();\r\n        this.startAngle = degrees;\r\n        if (!this.rect) {\r\n            if (this.startRotated) {\r\n                this.rotatedStartPoint = start;\r\n                this.rect = getPrerotatedRect(start, end, this.startRotatedHeight);\r\n            } else {\r\n                this.rect = new $.MeasuretoolRect(start.x, start.y, delta.x, delta.y);\r\n            }\r\n            this.rectDone = false;\r\n        } else {\r\n            this.rect.width += delta.x;\r\n            this.rect.height += delta.y;\r\n\r\n            if (end.x - this.rect.x < 0) {\r\n                if (end.y - this.rect.y < 0) {\r\n                    this.quadrant = 1;\r\n                    this.switched = false;\r\n                } else {\r\n                    this.quadrant = 2;\r\n                    this.switched = true;\r\n                }\r\n            } else if (end.y - this.rect.y < 0) {\r\n                this.quadrant = 0;\r\n                this.switched = false;\r\n            } else {\r\n                this.quadrant = 3;\r\n                this.switched = true;\r\n            }\r\n\r\n            //msg(this.quadrant + (this.switched ? \" switched\" : \"\"), \"#000\", 1, true);\r\n        }\r\n        this.draw();\r\n    }\r\n\r\n    function onOutsideDragEnd() {\r\n        // Enable move after new selection is done\r\n        this.viewer.setMouseNavEnabled(true);\r\n        this.rectDone = true;\r\n\r\n        //this.outerTracker.setTracking(false);\r\n    }\r\n\r\n    function onClick() {\r\n        this.viewer.canvas.focus();\r\n    }\r\n\r\n    function onCornerDrag(corner, e) {\r\n        var delta = e.delta;\r\n        var rotation = this.rect.getDegreeRotation();\r\n        var degrees = viewer.viewport.getRotation();\r\n        this.startAngle = degrees;\r\n        var center;\r\n        if (rotation !== 0) {\r\n            // adjust vector\r\n            delta = delta.rotate(-1 * rotation, new $.Point(0, 0));\r\n            center = this.rect.getCenter();\r\n        }\r\n        delta = this.viewer.viewport.deltaPointsFromPixels(delta, true);\r\n        var currentCorner = corner;\r\n        if (this.switched) {\r\n            currentCorner = 1 - currentCorner;\r\n        }\r\n        switch (currentCorner) {\r\n            case 0:\r\n                this.rect.y += delta.y;\r\n                this.rect.height -= delta.y;\r\n                this.rect.x += delta.x;\r\n                this.rect.width -= delta.x;\r\n                break;\r\n            case 1:\r\n                this.rect.width += delta.x;\r\n                this.rect.height += delta.y;\r\n                break;\r\n        }\r\n        \r\n        if (this.rect.width < 0) {\r\n            if (this.rect.height < 0) {\r\n                this.quadrant = 1;\r\n            } else {\r\n                this.quadrant = 2;\r\n            }\r\n        } else if (this.rect.height < 0) {\r\n            this.quadrant = 0;\r\n        } else {\r\n            this.quadrant = 3;\r\n        }\r\n\r\n        if (corner === 0) {\r\n            this.quadrant = (this.quadrant + 2) % 4;\r\n        }\r\n\r\n        if (rotation !== 0) {\r\n            // calc center deviation\r\n            var newCenter = this.rect.getCenter();\r\n            // rotate new center around old\r\n            var target = newCenter.rotate(rotation, center);\r\n            // adjust new center\r\n            delta = target.minus(newCenter);\r\n            this.rect.x += delta.x;\r\n            this.rect.y += delta.y;\r\n        }\r\n\r\n        //msg(this.quadrant + (this.switched ? \" switched\" : \"\"), \"#000\", 1, true);\r\n\r\n        this.draw();\r\n    }\r\n\r\n\r\n    function onCornerDragEnd(corner, e) {\r\n        if (corner === 0) {\r\n            this.switched = this.quadrant === 0 || this.quadrant === 1;\r\n        }\r\n        else if (corner === 1) {\r\n            this.switched = this.quadrant === 2 || this.quadrant === 3;\r\n        }\r\n    }\r\n\r\n    function onKeyPress(e) {\r\n        var key = e.keyCode ? e.keyCode : e.charCode;\r\n        if (key === 13) {\r\n            this.confirm();\r\n        } else if (String.fromCharCode(key) === this.keyboardShortcut) {\r\n            this.toggleState();\r\n        }\r\n    }\r\n\r\n    function getPrerotatedRect(start, end, height) {\r\n        if (start.x > end.x) {\r\n            // always draw left to right\r\n            var x = start;\r\n            start = end;\r\n            end = x;\r\n        }\r\n        var delta = end.minus(start);\r\n        var dist = start.distanceTo(end);\r\n        var angle = -1 * Math.atan2(delta.x, delta.y) + (Math.PI / 2);\r\n        var center = new $.Point(\r\n            delta.x / 2 + start.x,\r\n            delta.y / 2 + start.y\r\n        );\r\n        var rect = new $.MeasuretoolRect(\r\n            center.x - (dist / 2),\r\n            center.y - (height / 2),\r\n            dist,\r\n            height,\r\n            angle\r\n        );\r\n        var heightModDelta = new $.Point(0, height);\r\n        heightModDelta = heightModDelta.rotate(rect.getDegreeRotation(), new $.Point(0, 0));\r\n        rect.x += heightModDelta.x / 2;\r\n        rect.y += heightModDelta.y / 2;\r\n        return rect;\r\n    }\r\n\r\n    \r\n\r\n    function getWithUnit(value, unitSuffix) {\r\n        if (value < 0.000001) {\r\n            return value * 1000000000 + ' n' + unitSuffix;\r\n        }\r\n        if (value < 0.00001) { // mm measure up to 10 micrometer, then micrometer measure.\r\n            return value * 1000000 + ' μ' + unitSuffix;\r\n        }\r\n        if (value < 1) {\r\n            return value * 1000 + ' m' + unitSuffix;\r\n        }\r\n        if (value >= 1000) {\r\n            return value / 1000 + ' k' + unitSuffix;\r\n        }\r\n        return value + ' ' + unitSuffix;\r\n    }\r\n\r\n    function getRoundedWithUnit(value, sig, unitSuffix) {\r\n        if (sig < 0) {\r\n            return getWithUnit(value, unitSuffix);\r\n        }\r\n\r\n        var factor = Math.pow(10, sig);\r\n\r\n        if (value < 0.000001) {\r\n            return Math.round(factor * value * 1000000000) / factor + ' n' + unitSuffix;\r\n        }\r\n        if (value < 0.00001) { // mm measure up to 10 micrometer, then micrometer measure.\r\n            return Math.round(factor * value * 1000000) / factor + ' μ' + unitSuffix;\r\n        }\r\n        if (value < 1) {\r\n            return Math.round(factor * value * 1000) / factor + ' m' + unitSuffix;\r\n        }\r\n        if (value >= 1000) {\r\n            return Math.round(factor * value / 1000) / factor + ' k' + unitSuffix;\r\n        }\r\n        return Math.round(factor * value) / factor + ' ' + unitSuffix;\r\n    }\r\n\r\n\r\n})(OpenSeadragon);\r\n","(function( $ ){\r\n    'use strict';\r\n\r\n    /**\r\n     * @class Overlay\r\n     * @classdesc Provides a way to float an HTML element on top of the viewer element.\r\n     *\r\n     * @memberof OpenSeadragon\r\n     * @param {Object} options\r\n     * @param {Element} options.element\r\n     * @param {OpenSeadragon.Point|OpenSeadragon.Rect|OpenSeadragon.SelectionRect} options.location - The\r\n     * location of the overlay on the image. If a {@link OpenSeadragon.Point}\r\n     * is specified, the overlay will keep a constant size independently of the\r\n     * zoom. If a {@link OpenSeadragon.Rect} is specified, the overlay size will\r\n     * be adjusted when the zoom changes.\r\n     * @param {OpenSeadragon.OverlayPlacement} [options.placement=OpenSeadragon.OverlayPlacement.TOP_LEFT]\r\n     * Relative position to the viewport.\r\n     * Only used if location is a {@link OpenSeadragon.Point}.\r\n     * @param {OpenSeadragon.Overlay.OnDrawCallback} [options.onDraw]\r\n     * @param {Boolean} [options.checkResize=true] Set to false to avoid to\r\n     * check the size of the overlay everytime it is drawn when using a\r\n     * {@link OpenSeadragon.Point} as options.location. It will improve\r\n     * performances but will cause a misalignment if the overlay size changes.\r\n     */\r\n    $.MeasuretoolOverlay = function( element, location) {\r\n        $.Overlay.apply( this, arguments );\r\n\r\n        // set the rotation in radians\r\n        if ( $.isPlainObject( element ) ) {\r\n            this.rotation = element.location.rotation || 0;\r\n        } else {\r\n            this.rotation = location.rotation || 0;\r\n        }\r\n    };\r\n\r\n    $.MeasuretoolOverlay.prototype = $.extend(Object.create($.Overlay.prototype), {\r\n\r\n        /**\r\n         * @function\r\n         * @param {Element} container\r\n         */\r\n        drawHTML: function() {\r\n            $.Overlay.prototype.drawHTML.apply( this, arguments );\r\n            this.style.transform = this.style.transform.replace(/ ?rotate\\(.+rad\\)/, '') +\r\n                ' rotate(' + this.rotation + 'rad)';\r\n        },\r\n\r\n        /**\r\n         * @function\r\n         * @param {OpenSeadragon.Point|OpenSeadragon.Rect} location\r\n         * @param {OpenSeadragon.OverlayPlacement} position\r\n         */\r\n        update: function( location ) {\r\n            $.Overlay.prototype.update.apply( this, arguments );\r\n            this.rotation = location.rotation || 0;\r\n        }\r\n    });\r\n\r\n}( OpenSeadragon ));\r\n","(function( $ ){\r\n    'use strict';\r\n\r\n    /**\r\n     * @class MeasuretoolRect\r\n     * @classdesc A display rectangle is very similar to {@link OpenSeadragon.Rect} but adds rotation\r\n     * around the center point\r\n     *\r\n     * @memberof OpenSeadragon\r\n     * @extends OpenSeadragon.Rect\r\n     * @param {Number} x The vector component 'x'.\r\n     * @param {Number} y The vector component 'y'.\r\n     * @param {Number} width The vector component 'height'.\r\n     * @param {Number} height The vector component 'width'.\r\n     * @param {Number} rotation The rotation in radians\r\n     */\r\n    $.MeasuretoolRect = function( x, y, width, height, rotation ) {\r\n        $.Rect.apply( this, [ x, y, width, height ] );\r\n\r\n        /**\r\n         * The rotation in radians\r\n         * @member {Number} rotation\r\n         * @memberof OpenSeadragon.MeasuretoolRect#\r\n         */\r\n        this.rotation = rotation || 0;\r\n    };\r\n\r\n    $.MeasuretoolRect.fromRect = function(rect) {\r\n        return new $.MeasuretoolRect(\r\n            rect.x,\r\n            rect.y,\r\n            rect.width,\r\n            rect.height\r\n        );\r\n    };\r\n\r\n    $.MeasuretoolRect.prototype = $.extend( Object.create($.Rect.prototype), {\r\n\r\n        /**\r\n         * @function\r\n         * @returns {OpenSeadragon.Rect} a duplicate of this Rect\r\n         */\r\n        clone: function() {\r\n            return new $.MeasuretoolRect(this.x, this.y, this.width, this.height, this.rotation);\r\n        },\r\n\r\n        /**\r\n         * Determines if two Rectangles have equivalent components.\r\n         * @function\r\n         * @param {OpenSeadragon.Rect} rectangle The Rectangle to compare to.\r\n         * @return {Boolean} 'true' if all components are equal, otherwise 'false'.\r\n         */\r\n        equals: function( other ) {\r\n            return $.Rect.prototype.equals.apply(this, [ other ]) &&\r\n                ( this.rotation === other.rotation );\r\n        },\r\n\r\n        /**\r\n         * Provides a string representation of the rectangle which is useful for\r\n         * debugging.\r\n         * @function\r\n         * @returns {String} A string representation of the rectangle.\r\n         */\r\n        toString: function() {\r\n            return '[' +\r\n                (Math.round(this.x*100) / 100) + ',' +\r\n                (Math.round(this.y*100) / 100) + ',' +\r\n                (Math.round(this.width*100) / 100) + 'x' +\r\n                (Math.round(this.height*100) / 100) + '@' +\r\n                (Math.round(this.rotation*100) / 100) +\r\n            ']';\r\n        },\r\n\r\n        swapWidthHeight: function() {\r\n            var swapped = this.clone();\r\n            swapped.width = this.height;\r\n            swapped.height = this.width;\r\n            swapped.x += (this.width - this.height) / 2;\r\n            swapped.y += (this.height - this.width) / 2;\r\n            return swapped;\r\n        },\r\n\r\n        /**\r\n         * @function\r\n         * @returns {Number} The rotaion in degrees\r\n         */\r\n        getDegreeRotation: function() {\r\n            return this.rotation * (180/Math.PI);\r\n        },\r\n\r\n        /**\r\n         * @function\r\n         * @param {OpenSeadragon.Point} point\r\n         * @returns {Number} The angle in radians\r\n         */\r\n        getAngleFromCenter: function(point) {\r\n            var diff = point.minus(this.getCenter());\r\n            return Math.atan2(diff.x, diff.y);\r\n        },\r\n\r\n        /**\r\n         * Rounds pixel coordinates\r\n         * @function\r\n         * @returns {MeasuretoolRect} The altered rect\r\n         */\r\n        round: function() {\r\n            return new $.MeasuretoolRect(\r\n                Math.round(this.x),\r\n                Math.round(this.y),\r\n                Math.round(this.width),\r\n                Math.round(this.height),\r\n                this.rotation\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Fixes negative width/height, rotation larger than PI\r\n         * @function\r\n         * @returns {MeasuretoolRect} The normalized rect\r\n         */\r\n        normalize: function() {\r\n            var fixed = this.clone();\r\n            if (fixed.width < 0) {\r\n                fixed.x += fixed.width;\r\n                fixed.width *= -1;\r\n            }\r\n            if (fixed.height < 0) {\r\n                fixed.y += fixed.height;\r\n                fixed.height *= -1;\r\n            }\r\n            fixed.rotation %= Math.PI;\r\n            return fixed;\r\n        },\r\n\r\n        /**\r\n         * @function\r\n         * @param {OpenSeadragon.Rect} area\r\n         * @returns {Boolean} Does this rect fit in a specified area\r\n         */\r\n        fitsIn: function(area) {\r\n            var rect = this.normalize();\r\n            var corners = [\r\n                rect.getTopLeft(),\r\n                rect.getTopRight(),\r\n                rect.getBottomRight(),\r\n                rect.getBottomLeft(),\r\n            ];\r\n            var center = rect.getCenter();\r\n            var rotation = rect.getDegreeRotation();\r\n            var areaEnd = area.getBottomRight();\r\n            for (var i = 0; i < 4; i++) {\r\n                corners[i] = corners[i].rotate(rotation, center);\r\n                if (corners[i].x < area.x || corners[i].x > areaEnd.x ||\r\n                    corners[i].y < area.y || corners[i].y > areaEnd.y) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Reduces rotation to within [-45, 45] degrees by swapping width & height\r\n         * @function\r\n         * @returns {MeasuretoolRect} The altered rect\r\n         */\r\n        reduceRotation: function() {\r\n            var reduced;\r\n            if (this.rotation < Math.PI / (-4)) {\r\n                reduced = this.swapWidthHeight();\r\n                reduced.rotation += Math.PI / 2;\r\n            } else if (this.rotation > Math.PI / 4) {\r\n                reduced = this.swapWidthHeight();\r\n                reduced.rotation -= Math.PI / 2;\r\n            } else {\r\n                reduced = this.clone();\r\n            }\r\n            return reduced;\r\n        },\r\n    });\r\n\r\n}( OpenSeadragon ));\r\n"]}